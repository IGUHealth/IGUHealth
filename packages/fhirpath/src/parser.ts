/* eslint-disable */



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";

// @ts-ignore
function peg$subclass(child, parent) {
// @ts-ignore
  function C() { this.constructor = child; }
// @ts-ignore
  C.prototype = parent.prototype;
// @ts-ignore
  child.prototype = new C();
}

// @ts-ignore
function peg$SyntaxError(message, expected, found, location) {
// @ts-ignore
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
// @ts-ignore
  if (Object.setPrototypeOf) {
// @ts-ignore
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
// @ts-ignore
  self.expected = expected;
// @ts-ignore
  self.found = found;
// @ts-ignore
  self.location = location;
// @ts-ignore
  self.name = "SyntaxError";
// @ts-ignore
  return self;
}

// @ts-ignore
peg$subclass(peg$SyntaxError, Error);

// @ts-ignore
function peg$padEnd(str, targetLength, padString) {
// @ts-ignore
  padString = padString || " ";
// @ts-ignore
  if (str.length > targetLength) { return str; }
// @ts-ignore
  targetLength -= str.length;
// @ts-ignore
  padString += padString.repeat(targetLength);
// @ts-ignore
  return str + padString.slice(0, targetLength);
}

// @ts-ignore
peg$SyntaxError.prototype.format = function(sources) {
// @ts-ignore
  var str = "Error: " + this.message;
// @ts-ignore
  if (this.location) {
// @ts-ignore
    var src = null;
// @ts-ignore
    var k;
// @ts-ignore
    for (k = 0; k < sources.length; k++) {
// @ts-ignore
      if (sources[k].source === this.location.source) {
// @ts-ignore
        src = sources[k].text.split(/\r\n|\n|\r/g);
// @ts-ignore
        break;
      }
    }
// @ts-ignore
    var s = this.location.start;
// @ts-ignore
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
      ? this.location.source.offset(s)
// @ts-ignore
      : s;
// @ts-ignore
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
    if (src) {
// @ts-ignore
      var e = this.location.end;
// @ts-ignore
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
// @ts-ignore
      var line = src[s.line - 1];
// @ts-ignore
      var last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
      var hatLen = (last - s.column) || 1;
// @ts-ignore
      str += "\n --> " + loc + "\n"
// @ts-ignore
          + filler + " |\n"
// @ts-ignore
          + offset_s.line + " | " + line + "\n"
// @ts-ignore
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
// @ts-ignore
          + peg$padEnd("", hatLen, "^");
// @ts-ignore
    } else {
// @ts-ignore
      str += "\n at " + loc;
    }
  }
// @ts-ignore
  return str;
};

// @ts-ignore
peg$SyntaxError.buildMessage = function(expected, found) {
// @ts-ignore
  var DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
    literal: function(expectation) {
// @ts-ignore
      return "\"" + literalEscape(expectation.text) + "\"";
    },

// @ts-ignore
    class: function(expectation) {
// @ts-ignore
      var escapedParts = expectation.parts.map(function(part) {
// @ts-ignore
        return Array.isArray(part)
// @ts-ignore
          ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
          : classEscape(part);
      });

// @ts-ignore
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

// @ts-ignore
    any: function() {
// @ts-ignore
      return "any character";
    },

// @ts-ignore
    end: function() {
// @ts-ignore
      return "end of input";
    },

// @ts-ignore
    other: function(expectation) {
// @ts-ignore
      return expectation.description;
    }
  };

// @ts-ignore
  function hex(ch) {
// @ts-ignore
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

// @ts-ignore
  function literalEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/"/g,  "\\\"")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function classEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/\]/g, "\\]")
// @ts-ignore
      .replace(/\^/g, "\\^")
// @ts-ignore
      .replace(/-/g,  "\\-")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function describeExpectation(expectation) {
// @ts-ignore
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

// @ts-ignore
  function describeExpected(expected) {
// @ts-ignore
    var descriptions = expected.map(describeExpectation);
// @ts-ignore
    var i, j;

// @ts-ignore
    descriptions.sort();

// @ts-ignore
    if (descriptions.length > 0) {
// @ts-ignore
      for (i = 1, j = 1; i < descriptions.length; i++) {
// @ts-ignore
        if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
          descriptions[j] = descriptions[i];
// @ts-ignore
          j++;
        }
      }
// @ts-ignore
      descriptions.length = j;
    }

// @ts-ignore
    switch (descriptions.length) {
// @ts-ignore
      case 1:
// @ts-ignore
        return descriptions[0];

// @ts-ignore
      case 2:
// @ts-ignore
        return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
      default:
// @ts-ignore
        return descriptions.slice(0, -1).join(", ")
// @ts-ignore
          + ", or "
// @ts-ignore
          + descriptions[descriptions.length - 1];
    }
  }

// @ts-ignore
  function describeFound(found) {
// @ts-ignore
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

// @ts-ignore
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  var peg$FAILED = {};
// @ts-ignore
  var peg$source = options.grammarSource;

// @ts-ignore
  var peg$startRuleFunctions = { expression: peg$parseexpression };
// @ts-ignore
  var peg$startRuleFunction = peg$parseexpression;

// @ts-ignore
  var peg$c0 = "implies";
  var peg$c1 = "or";
  var peg$c2 = "xor";
  var peg$c3 = "and";
  var peg$c4 = "in";
  var peg$c5 = "contains";
  var peg$c6 = "<=";
  var peg$c7 = "<";
  var peg$c8 = ">";
  var peg$c9 = ">=";
  var peg$c10 = "=";
  var peg$c11 = "~";
  var peg$c12 = "!=";
  var peg$c13 = "!~";
  var peg$c14 = "|";
  var peg$c15 = "is";
  var peg$c16 = "as";
  var peg$c17 = "+";
  var peg$c18 = "-";
  var peg$c19 = "&";
  var peg$c20 = "*";
  var peg$c21 = "/";
  var peg$c22 = "div";
  var peg$c23 = "mod";
  var peg$c24 = ".";
  var peg$c25 = "[";
  var peg$c26 = "]";
  var peg$c27 = "(";
  var peg$c28 = ")";
  var peg$c29 = "{";
  var peg$c30 = "}";
  var peg$c31 = "true";
  var peg$c32 = "false";
  var peg$c33 = "%";
  var peg$c34 = "$this";
  var peg$c35 = "$index";
  var peg$c36 = "$total";
  var peg$c37 = ",";
  var peg$c38 = "year";
  var peg$c39 = "month";
  var peg$c40 = "week";
  var peg$c41 = "day";
  var peg$c42 = "hour";
  var peg$c43 = "minute";
  var peg$c44 = "second";
  var peg$c45 = "millisecond";
  var peg$c46 = "years";
  var peg$c47 = "months";
  var peg$c48 = "weeks";
  var peg$c49 = "days";
  var peg$c50 = "hours";
  var peg$c51 = "minutes";
  var peg$c52 = "seconds";
  var peg$c53 = "milliseconds";
  var peg$c54 = "@";
  var peg$c55 = "T";
  var peg$c56 = ":";
  var peg$c57 = "Z";
  var peg$c58 = "_";
  var peg$c59 = "`";
  var peg$c60 = "'";
  var peg$c61 = "\t";
  var peg$c62 = "\r";
  var peg$c63 = "\n";
  var peg$c64 = " ";

  var peg$r0 = /^[0-9]/;
  var peg$r1 = /^[A-Za-z]/;
  var peg$r2 = /^[A-Za-z0-9]/;
  var peg$r3 = /^[^`]/;
  var peg$r4 = /^[^']/;

  var peg$e0 = peg$literalExpectation("implies", false);
  var peg$e1 = peg$literalExpectation("or", false);
  var peg$e2 = peg$literalExpectation("xor", false);
  var peg$e3 = peg$literalExpectation("and", false);
  var peg$e4 = peg$literalExpectation("in", false);
  var peg$e5 = peg$literalExpectation("contains", false);
  var peg$e6 = peg$literalExpectation("<=", false);
  var peg$e7 = peg$literalExpectation("<", false);
  var peg$e8 = peg$literalExpectation(">", false);
  var peg$e9 = peg$literalExpectation(">=", false);
  var peg$e10 = peg$literalExpectation("=", false);
  var peg$e11 = peg$literalExpectation("~", false);
  var peg$e12 = peg$literalExpectation("!=", false);
  var peg$e13 = peg$literalExpectation("!~", false);
  var peg$e14 = peg$literalExpectation("|", false);
  var peg$e15 = peg$literalExpectation("is", false);
  var peg$e16 = peg$literalExpectation("as", false);
  var peg$e17 = peg$literalExpectation("+", false);
  var peg$e18 = peg$literalExpectation("-", false);
  var peg$e19 = peg$literalExpectation("&", false);
  var peg$e20 = peg$literalExpectation("*", false);
  var peg$e21 = peg$literalExpectation("/", false);
  var peg$e22 = peg$literalExpectation("div", false);
  var peg$e23 = peg$literalExpectation("mod", false);
  var peg$e24 = peg$literalExpectation(".", false);
  var peg$e25 = peg$literalExpectation("[", false);
  var peg$e26 = peg$literalExpectation("]", false);
  var peg$e27 = peg$literalExpectation("(", false);
  var peg$e28 = peg$literalExpectation(")", false);
  var peg$e29 = peg$literalExpectation("{", false);
  var peg$e30 = peg$literalExpectation("}", false);
  var peg$e31 = peg$literalExpectation("true", false);
  var peg$e32 = peg$literalExpectation("false", false);
  var peg$e33 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e34 = peg$literalExpectation("%", false);
  var peg$e35 = peg$literalExpectation("$this", false);
  var peg$e36 = peg$literalExpectation("$index", false);
  var peg$e37 = peg$literalExpectation("$total", false);
  var peg$e38 = peg$literalExpectation(",", false);
  var peg$e39 = peg$literalExpectation("year", false);
  var peg$e40 = peg$literalExpectation("month", false);
  var peg$e41 = peg$literalExpectation("week", false);
  var peg$e42 = peg$literalExpectation("day", false);
  var peg$e43 = peg$literalExpectation("hour", false);
  var peg$e44 = peg$literalExpectation("minute", false);
  var peg$e45 = peg$literalExpectation("second", false);
  var peg$e46 = peg$literalExpectation("millisecond", false);
  var peg$e47 = peg$literalExpectation("years", false);
  var peg$e48 = peg$literalExpectation("months", false);
  var peg$e49 = peg$literalExpectation("weeks", false);
  var peg$e50 = peg$literalExpectation("days", false);
  var peg$e51 = peg$literalExpectation("hours", false);
  var peg$e52 = peg$literalExpectation("minutes", false);
  var peg$e53 = peg$literalExpectation("seconds", false);
  var peg$e54 = peg$literalExpectation("milliseconds", false);
  var peg$e55 = peg$literalExpectation("@", false);
  var peg$e56 = peg$literalExpectation("T", false);
  var peg$e57 = peg$literalExpectation(":", false);
  var peg$e58 = peg$literalExpectation("Z", false);
  var peg$e59 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false);
  var peg$e60 = peg$literalExpectation("_", false);
  var peg$e61 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"]], false, false);
  var peg$e62 = peg$literalExpectation("`", false);
  var peg$e63 = peg$classExpectation(["`"], true, false);
  var peg$e64 = peg$literalExpectation("'", false);
  var peg$e65 = peg$classExpectation(["'"], true, false);
  var peg$e66 = peg$otherExpectation("whitespace");
  var peg$e67 = peg$literalExpectation("\t", false);
  var peg$e68 = peg$literalExpectation("\r", false);
  var peg$e69 = peg$literalExpectation("\n", false);
  var peg$e70 = peg$literalExpectation(" ", false);
// @ts-ignore

  var peg$f0 = function(expression) {// @ts-ignore
return expression};// @ts-ignore

  var peg$f1 = function(term, next) {// @ts-ignore
 return buildNode("Expression", buildNode("Singular", term, next)) };// @ts-ignore

  var peg$f2 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail)};// @ts-ignore

  var peg$f3 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail)};// @ts-ignore

  var peg$f4 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail)};// @ts-ignore

  var peg$f5 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail)};// @ts-ignore

  var peg$f6 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail)};// @ts-ignore

  var peg$f7 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail)};// @ts-ignore

  var peg$f8 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail)};// @ts-ignore

  var peg$f9 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail)};// @ts-ignore

  var peg$f10 = function(head, tail) {// @ts-ignore
 return buildBinaryExpression(head, tail)};// @ts-ignore

  var peg$f11 = function(invocation, next) {// @ts-ignore
 return [invocation, ...next.flat()]; };// @ts-ignore

  var peg$f12 = function(expression, next) {// @ts-ignore
 return [buildNode("Indexed", expression), ...next.flat()] };// @ts-ignore

  var peg$f13 = function(expression) {// @ts-ignore
return expression};// @ts-ignore

  var peg$f14 = function() {// @ts-ignore
return null};// @ts-ignore

  var peg$f15 = function(bool) {// @ts-ignore
return bool === "true"};// @ts-ignore

  var peg$f16 = function(num) {// @ts-ignore
return Number(num)};// @ts-ignore

  var peg$f17 = function(value) {// @ts-ignore
return buildNode("Literal", value)};// @ts-ignore

  var peg$f18 = function(variable) {// @ts-ignore
return buildNode("Variable", variable)};// @ts-ignore

  var peg$f19 = function() {// @ts-ignore
return buildNode("This")};// @ts-ignore

  var peg$f20 = function() {// @ts-ignore
return buildNode("Index")};// @ts-ignore

  var peg$f21 = function() {// @ts-ignore
return buildNode("Total")};// @ts-ignore

  var peg$f22 = function(invocation) {// @ts-ignore
return buildNode("Invocation", invocation)};// @ts-ignore

  var peg$f23 = function(identifier, paramList) {// @ts-ignore
return buildNode("Function", identifier, paramList || [])};// @ts-ignore

  var peg$f24 = function(head, tail) {// @ts-ignore
return [head].concat(tail.map(function(element) {return element[2]}))};// @ts-ignore

  var peg$f25 = function(value, unit) {// @ts-ignore
 return {value:value, unit:unit}};// @ts-ignore

  var peg$f26 = function(identifier) {// @ts-ignore
return buildNode("Identifier", identifier)};// @ts-ignore

  var peg$f27 = function(identifier) {// @ts-ignore
return buildNode("Identifier", identifier)};// @ts-ignore

  var peg$f28 = function(date) {// @ts-ignore
 return date };// @ts-ignore

  var peg$f29 = function(datetime) {// @ts-ignore
return datetime};// @ts-ignore

  var peg$f30 = function(time) {// @ts-ignore
 return time };// @ts-ignore

  var peg$f31 = function(id) {// @ts-ignore
return id};// @ts-ignore

  var peg$f32 = function(str) {// @ts-ignore
return str};
// @ts-ignore
  var peg$currPos = 0;
// @ts-ignore
  var peg$savedPos = 0;
// @ts-ignore
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  var peg$maxFailPos = 0;
// @ts-ignore
  var peg$maxFailExpected = [];
// @ts-ignore
  var peg$silentFails = 0;

// @ts-ignore
  var peg$resultsCache = {};

// @ts-ignore
  var peg$result;

// @ts-ignore
  if ("startRule" in options) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase) {
// @ts-ignore
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description: description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    var details = peg$posDetailsCache[pos];
// @ts-ignore
    var p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      p = pos - 1;
// @ts-ignore
      while (!peg$posDetailsCache[p]) {
// @ts-ignore
        p--;
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    var startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    var endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    var res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column
      }
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexpression() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    var key = peg$currPos * 36 + 0;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseWS();
// @ts-ignore
    s2 = peg$parseimplies_operation();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parseWS();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f0(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parse_singular_expression() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    var key = peg$currPos * 36 + 1;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseterm();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseexpression_inner();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f1(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseimplies_operation() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 36 + 2;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseor_operation();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseWS();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 7) === peg$c0) {
// @ts-ignore
        s6 = peg$c0;
// @ts-ignore
        peg$currPos += 7;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s5 = input.substring(s5, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s5 = s6;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseWS();
// @ts-ignore
        s7 = peg$parseor_operation();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parseWS();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 7) === peg$c0) {
// @ts-ignore
          s6 = peg$c0;
// @ts-ignore
          peg$currPos += 7;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = input.substring(s5, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s5 = s6;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseWS();
// @ts-ignore
          s7 = peg$parseor_operation();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseWS();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f2(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseor_operation() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 36 + 3;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseand_operation();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseWS();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c1) {
// @ts-ignore
        s6 = peg$c1;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 3) === peg$c2) {
// @ts-ignore
          s6 = peg$c2;
// @ts-ignore
          peg$currPos += 3;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s5 = input.substring(s5, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s5 = s6;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseWS();
// @ts-ignore
        s7 = peg$parseand_operation();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parseWS();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c1) {
// @ts-ignore
          s6 = peg$c1;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 3) === peg$c2) {
// @ts-ignore
            s6 = peg$c2;
// @ts-ignore
            peg$currPos += 3;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = input.substring(s5, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s5 = s6;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseWS();
// @ts-ignore
          s7 = peg$parseand_operation();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseWS();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f3(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseand_operation() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 36 + 4;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsemem_operation();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseWS();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 3) === peg$c3) {
// @ts-ignore
        s6 = peg$c3;
// @ts-ignore
        peg$currPos += 3;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s5 = input.substring(s5, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s5 = s6;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseWS();
// @ts-ignore
        s7 = peg$parsemem_operation();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parseWS();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 3) === peg$c3) {
// @ts-ignore
          s6 = peg$c3;
// @ts-ignore
          peg$currPos += 3;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = input.substring(s5, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s5 = s6;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseWS();
// @ts-ignore
          s7 = peg$parsemem_operation();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseWS();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f4(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemem_operation() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 36 + 5;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseequality_operation();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseWS();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c4) {
// @ts-ignore
        s6 = peg$c4;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 8) === peg$c5) {
// @ts-ignore
          s6 = peg$c5;
// @ts-ignore
          peg$currPos += 8;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s5 = input.substring(s5, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s5 = s6;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseWS();
// @ts-ignore
        s7 = peg$parseequality_operation();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parseWS();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c4) {
// @ts-ignore
          s6 = peg$c4;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 8) === peg$c5) {
// @ts-ignore
            s6 = peg$c5;
// @ts-ignore
            peg$currPos += 8;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = input.substring(s5, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s5 = s6;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseWS();
// @ts-ignore
          s7 = peg$parseequality_operation();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseWS();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f5(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseequality_operation() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 36 + 6;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseunion_operation();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseWS();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c6) {
// @ts-ignore
        s6 = peg$c6;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
          s6 = peg$c7;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
            s6 = peg$c8;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e8); }
          }
// @ts-ignore
          if (s6 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c9) {
// @ts-ignore
              s6 = peg$c9;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
// @ts-ignore
            if (s6 === peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
                s6 = peg$c10;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s6 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e10); }
              }
// @ts-ignore
              if (s6 === peg$FAILED) {
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 126) {
// @ts-ignore
                  s6 = peg$c11;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s6 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e11); }
                }
// @ts-ignore
                if (s6 === peg$FAILED) {
// @ts-ignore
                  if (input.substr(peg$currPos, 2) === peg$c12) {
// @ts-ignore
                    s6 = peg$c12;
// @ts-ignore
                    peg$currPos += 2;
// @ts-ignore
                  } else {
// @ts-ignore
                    s6 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e12); }
                  }
// @ts-ignore
                  if (s6 === peg$FAILED) {
// @ts-ignore
                    if (input.substr(peg$currPos, 2) === peg$c13) {
// @ts-ignore
                      s6 = peg$c13;
// @ts-ignore
                      peg$currPos += 2;
// @ts-ignore
                    } else {
// @ts-ignore
                      s6 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e13); }
                    }
                  }
                }
              }
            }
          }
        }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s5 = input.substring(s5, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s5 = s6;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseWS();
// @ts-ignore
        s7 = peg$parseunion_operation();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parseWS();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c6) {
// @ts-ignore
          s6 = peg$c6;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
            s6 = peg$c7;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
// @ts-ignore
          if (s6 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
              s6 = peg$c8;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
// @ts-ignore
            if (s6 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 2) === peg$c9) {
// @ts-ignore
                s6 = peg$c9;
// @ts-ignore
                peg$currPos += 2;
// @ts-ignore
              } else {
// @ts-ignore
                s6 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e9); }
              }
// @ts-ignore
              if (s6 === peg$FAILED) {
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
                  s6 = peg$c10;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s6 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e10); }
                }
// @ts-ignore
                if (s6 === peg$FAILED) {
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 126) {
// @ts-ignore
                    s6 = peg$c11;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s6 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e11); }
                  }
// @ts-ignore
                  if (s6 === peg$FAILED) {
// @ts-ignore
                    if (input.substr(peg$currPos, 2) === peg$c12) {
// @ts-ignore
                      s6 = peg$c12;
// @ts-ignore
                      peg$currPos += 2;
// @ts-ignore
                    } else {
// @ts-ignore
                      s6 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e12); }
                    }
// @ts-ignore
                    if (s6 === peg$FAILED) {
// @ts-ignore
                      if (input.substr(peg$currPos, 2) === peg$c13) {
// @ts-ignore
                        s6 = peg$c13;
// @ts-ignore
                        peg$currPos += 2;
// @ts-ignore
                      } else {
// @ts-ignore
                        s6 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e13); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = input.substring(s5, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s5 = s6;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseWS();
// @ts-ignore
          s7 = peg$parseunion_operation();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseWS();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f6(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseunion_operation() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 36 + 7;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseis_as_operation();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseWS();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 124) {
// @ts-ignore
        s6 = peg$c14;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s5 = input.substring(s5, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s5 = s6;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseWS();
// @ts-ignore
        s7 = peg$parseis_as_operation();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parseWS();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 124) {
// @ts-ignore
          s6 = peg$c14;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = input.substring(s5, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s5 = s6;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseWS();
// @ts-ignore
          s7 = peg$parseis_as_operation();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseWS();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f7(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseis_as_operation() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 36 + 8;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseadditive_operation();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseWS();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c15) {
// @ts-ignore
        s6 = peg$c15;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c16) {
// @ts-ignore
          s6 = peg$c16;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s5 = input.substring(s5, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s5 = s6;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseWS();
// @ts-ignore
        s7 = peg$parseadditive_operation();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parseWS();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c15) {
// @ts-ignore
          s6 = peg$c15;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c16) {
// @ts-ignore
            s6 = peg$c16;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e16); }
          }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = input.substring(s5, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s5 = s6;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseWS();
// @ts-ignore
          s7 = peg$parseadditive_operation();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseWS();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f8(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseadditive_operation() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 36 + 9;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsemultiplication_operation();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseWS();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
        s6 = peg$c17;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
          s6 = peg$c18;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 38) {
// @ts-ignore
            s6 = peg$c19;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
        }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s5 = input.substring(s5, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s5 = s6;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseWS();
// @ts-ignore
        s7 = peg$parsemultiplication_operation();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parseWS();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
          s6 = peg$c17;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
            s6 = peg$c18;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e18); }
          }
// @ts-ignore
          if (s6 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 38) {
// @ts-ignore
              s6 = peg$c19;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e19); }
            }
          }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = input.substring(s5, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s5 = s6;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseWS();
// @ts-ignore
          s7 = peg$parsemultiplication_operation();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseWS();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f9(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemultiplication_operation() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 36 + 10;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_singular_expression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseWS();
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
        s6 = peg$c20;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s6 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
          s6 = peg$c21;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 3) === peg$c22) {
// @ts-ignore
            s6 = peg$c22;
// @ts-ignore
            peg$currPos += 3;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
// @ts-ignore
          if (s6 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 3) === peg$c23) {
// @ts-ignore
              s6 = peg$c23;
// @ts-ignore
              peg$currPos += 3;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e23); }
            }
          }
        }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s5 = input.substring(s5, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s5 = s6;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parseWS();
// @ts-ignore
        s7 = peg$parse_singular_expression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parseWS();
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
          s6 = peg$c20;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
            s6 = peg$c21;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e21); }
          }
// @ts-ignore
          if (s6 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 3) === peg$c22) {
// @ts-ignore
              s6 = peg$c22;
// @ts-ignore
              peg$currPos += 3;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
// @ts-ignore
            if (s6 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 3) === peg$c23) {
// @ts-ignore
                s6 = peg$c23;
// @ts-ignore
                peg$currPos += 3;
// @ts-ignore
              } else {
// @ts-ignore
                s6 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
            }
          }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = input.substring(s5, peg$currPos);
// @ts-ignore
        } else {
// @ts-ignore
          s5 = s6;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parseWS();
// @ts-ignore
          s7 = peg$parse_singular_expression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseWS();
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f10(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexpression_inner() {
// @ts-ignore
    var s0;

// @ts-ignore
    var key = peg$currPos * 36 + 11;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$parseinvocation_expression();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseindexed_expression();
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinvocation_expression() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    var key = peg$currPos * 36 + 12;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
      s1 = peg$c24;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseinvocation();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = [];
// @ts-ignore
        s4 = peg$parseexpression_inner();
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$parseexpression_inner();
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f11(s2, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseindexed_expression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    var key = peg$currPos * 36 + 13;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s1 = peg$c25;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseexpression();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
          s3 = peg$c26;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = [];
// @ts-ignore
          s5 = peg$parseexpression_inner();
// @ts-ignore
          while (s5 !== peg$FAILED) {
// @ts-ignore
            s4.push(s5);
// @ts-ignore
            s5 = peg$parseexpression_inner();
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f12(s2, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseterm() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    var key = peg$currPos * 36 + 14;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$parseliteral();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseinvocation();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseexternalConstant();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
            s1 = peg$c27;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e27); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            s2 = peg$parseexpression();
// @ts-ignore
            if (s2 !== peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                s3 = peg$c28;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s3 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e28); }
              }
// @ts-ignore
              if (s3 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f13(s2);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
        }
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    var key = peg$currPos * 36 + 15;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
      s2 = peg$c29;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
        s3 = peg$c30;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s1;
// @ts-ignore
        s1 = peg$f14();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 4) === peg$c31) {
// @ts-ignore
        s3 = peg$c31;
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 5) === peg$c32) {
// @ts-ignore
          s3 = peg$c32;
// @ts-ignore
          peg$currPos += 5;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = input.substring(s2, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s2 = s3;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s1;
// @ts-ignore
        s2 = peg$f15(s2);
      }
// @ts-ignore
      s1 = s2;
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseSTRING();
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$currPos;
// @ts-ignore
          s2 = peg$parseNUMBER();
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s1;
// @ts-ignore
            s2 = peg$f16(s2);
          }
// @ts-ignore
          s1 = s2;
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$parseDATETIME();
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              s1 = peg$parseDATE();
// @ts-ignore
              if (s1 === peg$FAILED) {
// @ts-ignore
                s1 = peg$parseTIME();
// @ts-ignore
                if (s1 === peg$FAILED) {
// @ts-ignore
                  s1 = peg$parsequantity();
                }
              }
            }
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f17(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNUMBER() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    var key = peg$currPos * 36 + 16;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = [];
// @ts-ignore
    if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s4 = peg$c24;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = [];
// @ts-ignore
        if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          while (s6 !== peg$FAILED) {
// @ts-ignore
            s5.push(s6);
// @ts-ignore
            if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s6 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
          }
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      s2 = [s2, s3];
// @ts-ignore
      s1 = s2;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexternalConstant() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    var key = peg$currPos * 36 + 17;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 37) {
// @ts-ignore
      s1 = peg$c33;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseidentifier();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parseSTRING();
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f18(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinvocation() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    var key = peg$currPos * 36 + 18;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsefunction();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseidentifier();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 5) === peg$c34) {
// @ts-ignore
          s2 = peg$c34;
// @ts-ignore
          peg$currPos += 5;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s1;
// @ts-ignore
          s2 = peg$f19();
        }
// @ts-ignore
        s1 = s2;
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 6) === peg$c35) {
// @ts-ignore
            s2 = peg$c35;
// @ts-ignore
            peg$currPos += 6;
// @ts-ignore
          } else {
// @ts-ignore
            s2 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
// @ts-ignore
          if (s2 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s1;
// @ts-ignore
            s2 = peg$f20();
          }
// @ts-ignore
          s1 = s2;
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = peg$currPos;
// @ts-ignore
            if (input.substr(peg$currPos, 6) === peg$c36) {
// @ts-ignore
              s2 = peg$c36;
// @ts-ignore
              peg$currPos += 6;
// @ts-ignore
            } else {
// @ts-ignore
              s2 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e37); }
            }
// @ts-ignore
            if (s2 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s1;
// @ts-ignore
              s2 = peg$f21();
            }
// @ts-ignore
            s1 = s2;
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f22(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefunction() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    var key = peg$currPos * 36 + 19;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseidentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s2 = peg$c27;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parseparamList();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = null;
        }
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
          s4 = peg$c28;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f23(s1, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseparamList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 36 + 20;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseWS();
// @ts-ignore
    s2 = peg$parseexpression();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parseWS();
// @ts-ignore
      s4 = [];
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s6 = peg$c37;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parseWS();
// @ts-ignore
        s8 = peg$parseexpression();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s6 = [s6, s7, s8];
// @ts-ignore
          s5 = s6;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      while (s5 !== peg$FAILED) {
// @ts-ignore
        s4.push(s5);
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s6 = peg$c37;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e38); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parseWS();
// @ts-ignore
          s8 = peg$parseexpression();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s6 = [s6, s7, s8];
// @ts-ignore
            s5 = s6;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f24(s2, s4);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsequantity() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    var key = peg$currPos * 36 + 21;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseNUMBER();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseWS();
// @ts-ignore
      s3 = peg$parseunit();
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s3 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f25(s1, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseunit() {
// @ts-ignore
    var s0;

// @ts-ignore
    var key = peg$currPos * 36 + 22;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$parsedateTimePrecision();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsepluralDateTimePrecision();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseSTRING();
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedateTimePrecision() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    var key = peg$currPos * 36 + 23;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c38) {
// @ts-ignore
      s1 = peg$c38;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 5) === peg$c39) {
// @ts-ignore
        s1 = peg$c39;
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 4) === peg$c40) {
// @ts-ignore
          s1 = peg$c40;
// @ts-ignore
          peg$currPos += 4;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e41); }
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 3) === peg$c41) {
// @ts-ignore
            s1 = peg$c41;
// @ts-ignore
            peg$currPos += 3;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e42); }
          }
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 4) === peg$c42) {
// @ts-ignore
              s1 = peg$c42;
// @ts-ignore
              peg$currPos += 4;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e43); }
            }
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 6) === peg$c43) {
// @ts-ignore
                s1 = peg$c43;
// @ts-ignore
                peg$currPos += 6;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e44); }
              }
// @ts-ignore
              if (s1 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 6) === peg$c44) {
// @ts-ignore
                  s1 = peg$c44;
// @ts-ignore
                  peg$currPos += 6;
// @ts-ignore
                } else {
// @ts-ignore
                  s1 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e45); }
                }
// @ts-ignore
                if (s1 === peg$FAILED) {
// @ts-ignore
                  if (input.substr(peg$currPos, 11) === peg$c45) {
// @ts-ignore
                    s1 = peg$c45;
// @ts-ignore
                    peg$currPos += 11;
// @ts-ignore
                  } else {
// @ts-ignore
                    s1 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e46); }
                  }
                }
              }
            }
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsepluralDateTimePrecision() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    var key = peg$currPos * 36 + 24;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c46) {
// @ts-ignore
      s1 = peg$c46;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 6) === peg$c47) {
// @ts-ignore
        s1 = peg$c47;
// @ts-ignore
        peg$currPos += 6;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 5) === peg$c48) {
// @ts-ignore
          s1 = peg$c48;
// @ts-ignore
          peg$currPos += 5;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 4) === peg$c49) {
// @ts-ignore
            s1 = peg$c49;
// @ts-ignore
            peg$currPos += 4;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 5) === peg$c50) {
// @ts-ignore
              s1 = peg$c50;
// @ts-ignore
              peg$currPos += 5;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e51); }
            }
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 7) === peg$c51) {
// @ts-ignore
                s1 = peg$c51;
// @ts-ignore
                peg$currPos += 7;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e52); }
              }
// @ts-ignore
              if (s1 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 7) === peg$c52) {
// @ts-ignore
                  s1 = peg$c52;
// @ts-ignore
                  peg$currPos += 7;
// @ts-ignore
                } else {
// @ts-ignore
                  s1 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e53); }
                }
// @ts-ignore
                if (s1 === peg$FAILED) {
// @ts-ignore
                  if (input.substr(peg$currPos, 12) === peg$c53) {
// @ts-ignore
                    s1 = peg$c53;
// @ts-ignore
                    peg$currPos += 12;
// @ts-ignore
                  } else {
// @ts-ignore
                    s1 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e54); }
                  }
                }
              }
            }
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseidentifier() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    var key = peg$currPos * 36 + 25;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIDENTIFIER();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f26(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseDELIMITEDIDENTIFIER();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f27(s1);
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDATE() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    var key = peg$currPos * 36 + 26;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 64) {
// @ts-ignore
      s1 = peg$c54;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseDATEFORMAT();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f28(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDATETIME() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    var key = peg$currPos * 36 + 27;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 64) {
// @ts-ignore
      s1 = peg$c54;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseDATEFORMAT();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 84) {
// @ts-ignore
          s5 = peg$c55;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$currPos;
// @ts-ignore
          s7 = peg$parseTIMEFORMAT();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s8 = peg$parseTIMEZONEOFFSETFORMAT();
// @ts-ignore
            if (s8 === peg$FAILED) {
// @ts-ignore
              s8 = null;
            }
// @ts-ignore
            s7 = [s7, s8];
// @ts-ignore
            s6 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s6;
// @ts-ignore
            s6 = peg$FAILED;
          }
// @ts-ignore
          if (s6 === peg$FAILED) {
// @ts-ignore
            s6 = null;
          }
// @ts-ignore
          s4 = [s4, s5, s6];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s2 = input.substring(s2, peg$currPos);
// @ts-ignore
      } else {
// @ts-ignore
        s2 = s3;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f29(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTIME() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    var key = peg$currPos * 36 + 28;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 64) {
// @ts-ignore
      s1 = peg$c54;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 84) {
// @ts-ignore
        s2 = peg$c55;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parseTIMEFORMAT();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f30(s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDATEFORMAT() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

// @ts-ignore
    var key = peg$currPos * 36 + 29;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e33); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$currPos;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
              s7 = peg$c18;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s7 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e18); }
            }
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
                s8 = input.charAt(peg$currPos);
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s8 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e33); }
              }
// @ts-ignore
              if (s8 !== peg$FAILED) {
// @ts-ignore
                if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
                  s9 = input.charAt(peg$currPos);
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s9 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e33); }
                }
// @ts-ignore
                if (s9 !== peg$FAILED) {
// @ts-ignore
                  s10 = peg$currPos;
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
                    s11 = peg$c18;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s11 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e18); }
                  }
// @ts-ignore
                  if (s11 !== peg$FAILED) {
// @ts-ignore
                    if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
                      s12 = input.charAt(peg$currPos);
// @ts-ignore
                      peg$currPos++;
// @ts-ignore
                    } else {
// @ts-ignore
                      s12 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e33); }
                    }
// @ts-ignore
                    if (s12 !== peg$FAILED) {
// @ts-ignore
                      if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
                        s13 = input.charAt(peg$currPos);
// @ts-ignore
                        peg$currPos++;
// @ts-ignore
                      } else {
// @ts-ignore
                        s13 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e33); }
                      }
// @ts-ignore
                      if (s13 !== peg$FAILED) {
// @ts-ignore
                        s11 = [s11, s12, s13];
// @ts-ignore
                        s10 = s11;
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s10;
// @ts-ignore
                        s10 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s10;
// @ts-ignore
                      s10 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s10;
// @ts-ignore
                    s10 = peg$FAILED;
                  }
// @ts-ignore
                  if (s10 === peg$FAILED) {
// @ts-ignore
                    s10 = null;
                  }
// @ts-ignore
                  s7 = [s7, s8, s9, s10];
// @ts-ignore
                  s6 = s7;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s6;
// @ts-ignore
                  s6 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s6;
// @ts-ignore
                s6 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s6;
// @ts-ignore
              s6 = peg$FAILED;
            }
// @ts-ignore
            if (s6 === peg$FAILED) {
// @ts-ignore
              s6 = null;
            }
// @ts-ignore
            s2 = [s2, s3, s4, s5, s6];
// @ts-ignore
            s1 = s2;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTIMEFORMAT() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

// @ts-ignore
    var key = peg$currPos * 36 + 30;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
          s5 = peg$c56;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e57); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s6 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e33); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
              s7 = input.charAt(peg$currPos);
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s7 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s8 = peg$currPos;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
                s9 = peg$c56;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s9 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e57); }
              }
// @ts-ignore
              if (s9 !== peg$FAILED) {
// @ts-ignore
                if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
                  s10 = input.charAt(peg$currPos);
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s10 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e33); }
                }
// @ts-ignore
                if (s10 !== peg$FAILED) {
// @ts-ignore
                  if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
                    s11 = input.charAt(peg$currPos);
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s11 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e33); }
                  }
// @ts-ignore
                  if (s11 !== peg$FAILED) {
// @ts-ignore
                    s12 = peg$currPos;
// @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
                      s13 = peg$c24;
// @ts-ignore
                      peg$currPos++;
// @ts-ignore
                    } else {
// @ts-ignore
                      s13 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e24); }
                    }
// @ts-ignore
                    if (s13 !== peg$FAILED) {
// @ts-ignore
                      s14 = [];
// @ts-ignore
                      if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
                        s15 = input.charAt(peg$currPos);
// @ts-ignore
                        peg$currPos++;
// @ts-ignore
                      } else {
// @ts-ignore
                        s15 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e33); }
                      }
// @ts-ignore
                      if (s15 !== peg$FAILED) {
// @ts-ignore
                        while (s15 !== peg$FAILED) {
// @ts-ignore
                          s14.push(s15);
// @ts-ignore
                          if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
                            s15 = input.charAt(peg$currPos);
// @ts-ignore
                            peg$currPos++;
// @ts-ignore
                          } else {
// @ts-ignore
                            s15 = peg$FAILED;
// @ts-ignore
                            if (peg$silentFails === 0) { peg$fail(peg$e33); }
                          }
                        }
// @ts-ignore
                      } else {
// @ts-ignore
                        s14 = peg$FAILED;
                      }
// @ts-ignore
                      if (s14 !== peg$FAILED) {
// @ts-ignore
                        s13 = [s13, s14];
// @ts-ignore
                        s12 = s13;
// @ts-ignore
                      } else {
// @ts-ignore
                        peg$currPos = s12;
// @ts-ignore
                        s12 = peg$FAILED;
                      }
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s12;
// @ts-ignore
                      s12 = peg$FAILED;
                    }
// @ts-ignore
                    if (s12 === peg$FAILED) {
// @ts-ignore
                      s12 = null;
                    }
// @ts-ignore
                    s9 = [s9, s10, s11, s12];
// @ts-ignore
                    s8 = s9;
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s8;
// @ts-ignore
                    s8 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s8;
// @ts-ignore
                  s8 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s8;
// @ts-ignore
                s8 = peg$FAILED;
              }
// @ts-ignore
              if (s8 === peg$FAILED) {
// @ts-ignore
                s8 = null;
              }
// @ts-ignore
              s5 = [s5, s6, s7, s8];
// @ts-ignore
              s4 = s5;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s4;
// @ts-ignore
              s4 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s2 = [s2, s3, s4];
// @ts-ignore
        s1 = s2;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTIMEZONEOFFSETFORMAT() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    var key = peg$currPos * 36 + 31;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 90) {
// @ts-ignore
      s1 = peg$c57;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
        s2 = peg$c17;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
          s2 = peg$c18;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s3 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s4 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e33); }
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
              s5 = peg$c56;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
                s6 = input.charAt(peg$currPos);
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s6 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e33); }
              }
// @ts-ignore
              if (s6 !== peg$FAILED) {
// @ts-ignore
                if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
                  s7 = input.charAt(peg$currPos);
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s7 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e33); }
                }
// @ts-ignore
                if (s7 !== peg$FAILED) {
// @ts-ignore
                  s2 = [s2, s3, s4, s5, s6, s7];
// @ts-ignore
                  s1 = s2;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s1;
// @ts-ignore
                  s1 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s1;
// @ts-ignore
                s1 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s1;
// @ts-ignore
              s1 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s1;
// @ts-ignore
            s1 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s1;
// @ts-ignore
          s1 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIDENTIFIER() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    var key = peg$currPos * 36 + 32;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 95) {
// @ts-ignore
        s2 = peg$c58;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = [];
// @ts-ignore
      if (peg$r2.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 95) {
// @ts-ignore
          s4 = peg$c58;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        if (peg$r2.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 95) {
// @ts-ignore
            s4 = peg$c58;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e60); }
          }
        }
      }
// @ts-ignore
      s2 = [s2, s3];
// @ts-ignore
      s1 = s2;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s0 = input.substring(s0, peg$currPos);
// @ts-ignore
    } else {
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDELIMITEDIDENTIFIER() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    var key = peg$currPos * 36 + 33;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 96) {
// @ts-ignore
      s1 = peg$c59;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = [];
// @ts-ignore
      if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e63); }
        }
      }
// @ts-ignore
      s2 = input.substring(s2, peg$currPos);
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 96) {
// @ts-ignore
        s3 = peg$c59;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f31(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSTRING() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    var key = peg$currPos * 36 + 34;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
      s1 = peg$c60;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = [];
// @ts-ignore
      if (peg$r4.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        if (peg$r4.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s4 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
      }
// @ts-ignore
      s2 = input.substring(s2, peg$currPos);
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
        s3 = peg$c60;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f32(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWS() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    var key = peg$currPos * 36 + 35;
// @ts-ignore
    var cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = [];
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 9) {
// @ts-ignore
      s1 = peg$c61;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 13) {
// @ts-ignore
        s1 = peg$c62;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e68); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 10) {
// @ts-ignore
          s1 = peg$c63;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e69); }
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 32) {
// @ts-ignore
            s1 = peg$c64;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e70); }
          }
        }
      }
    }
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 9) {
// @ts-ignore
        s1 = peg$c61;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 13) {
// @ts-ignore
          s1 = peg$c62;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 10) {
// @ts-ignore
            s1 = peg$c63;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e69); }
          }
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 32) {
// @ts-ignore
              s1 = peg$c64;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e70); }
            }
          }
        }
      }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    s1 = peg$FAILED;
// @ts-ignore
    if (peg$silentFails === 0) { peg$fail(peg$e66); }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }


// @ts-ignore
  function buildBinaryExpression(head, tail) {
// @ts-ignore
    return tail.reduce(function(result, element) {
// @ts-ignore
      return buildNode("Expression", {
// @ts-ignore
        type: "Operation",
// @ts-ignore
        operator: element[0],
// @ts-ignore
        left: result,
// @ts-ignore
        right: element[2]
      });
// @ts-ignore
    }, head);
  }

// @ts-ignore
  function buildNode<T>(type: string, value: T, next){
// @ts-ignore
        let node = {type: type};
        // Value could be false literal
// @ts-ignore
        if (value !== undefined && value !== null) node.value = value
// @ts-ignore
        if (next) node.next = next;
// @ts-ignore
        return node
  }

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// @ts-ignore
  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "expression";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "expression" ? Expression : Expression
    : Expression;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Expression = ImpliesOperation;
export type _SingularExpression = { type: string };
export type ImpliesOperation = any;
export type OrOperation = any;
export type AndOperation = any;
export type MemOperation = any;
export type EqualityOperation = any;
export type UnionOperation = any;
export type IsAsOperation = any;
export type AdditiveOperation = any;
export type MultiplicationOperation = any;
export type ExpressionInner = InvocationExpression | IndexedExpression;
export type InvocationExpression = [
  Invocation,
  ...(ExpressionInner[] extends (infer InnerArr)[]
    ? InnerArr extends (infer InnerArr)[]
      ? InnerArr
      : InnerArr
    : ExpressionInner[])[]
];
export type IndexedExpression = [
  { type: string },
  ...(ExpressionInner[] extends (infer InnerArr)[]
    ? InnerArr extends (infer InnerArr)[]
      ? InnerArr
      : InnerArr
    : ExpressionInner[])[]
];
export type Term = Literal | Invocation | ExternalConstant | Expression;
export type Literal = { type: string };
export type NUMBER = string;
export type ExternalConstant = { type: string };
export type Invocation = { type: string };
export type Function_1 = { type: string };
export type ParamList = Expression[];
export type Quantity = { value: NUMBER; unit: Unit | null };
export type Unit = DateTimePrecision | PluralDateTimePrecision | STRING;
export type DateTimePrecision = string;
export type PluralDateTimePrecision = string;
export type Identifier = { type: string };
export type DATE = DATEFORMAT;
export type DATETIME = string;
export type TIME = TIMEFORMAT;
export type DATEFORMAT = string;
export type TIMEFORMAT = string;
export type TIMEZONEOFFSETFORMAT = string;
export type IDENTIFIER = string;
export type DELIMITEDIDENTIFIER = string;
export type STRING = string;
export type WS = ("\t" | "\r" | "\n" | " ")[];
