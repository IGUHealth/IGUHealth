{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "IGUHealthEnvironment",
  "type": "object",
  "$id": "https://IGUHealth.app/environment-variables",
  "additionalProperties": true,
  "allOf": [
    {
      "$ref": "#/$defs/resource-store-pg"
    },
    {
      "$ref": "#/$defs/search-store-pg"
    },
    {
      "$ref": "#/$defs/artifact-pg"
    },
    {
      "$ref": "#/$defs/queue-kafka"
    },
    {
      "$ref": "#/$defs/queue-pg"
    }
  ],
  "required": [
    "API_URL",
    "IGUHEALTH_ENVIRONMENT",
    "AUTH_ISSUER",
    "REDIS_HOST",
    "REDIS_PORT",
    "SESSION_COOKIE_SECRETS",
    "AUTH_LOCAL_SIGNING_KEY",
    "QUEUE_TYPE",
    "RESOURCE_STORE_TYPE",
    "SEARCH_STORE_TYPE",
    "ARTIFACT_DB_TYPE",
    "AUTH_CERTIFICATION_TYPE"
  ],
  "properties": {
    "IGUHEALTH_ENVIRONMENT": {
      "description": "The environment the server is running in",
      "type": "string",
      "default": "development"
    },
    "SESSION_COOKIE_SECRETS": {
      "type": "string",
      "description": "Secret used to sign session cookies",
      "default": "iguhealth"
    },
    "RESOURCE_STORE_TYPE": {
      "type": "string",
      "description": "Resource storage type.",
      "enum": [
        "postgres"
      ]
    },
    "ARTIFACT_DB_TYPE": {
      "type": "string",
      "description": "Artifact DB type.",
      "enum": [
        "postgres"
      ]
    },
    "SEARCH_STORE_TYPE": {
      "type": "string",
      "description": "Search storage type.",
      "enum": [
        "postgres"
      ]
    },
    "QUEUE_TYPE": {
      "type": "string",
      "description": "Queue Type.",
      "enum": [
        "kafka",
        "postgres"
      ]
    },
    "REDIS_HOST": {
      "type": "string",
      "description": "Redis host",
      "default": "127.0.0.1"
    },
    "REDIS_PORT": {
      "type": "string",
      "pattern": "[0-9]{4}",
      "description": "Redis port",
      "default": "6379"
    },
    "REDIS_SSL": {
      "type": "string",
      "enum": [
        "true",
        "false"
      ],
      "description": "Whether Redis connection is SSL",
      "default": "false"
    },
    "FHIR_DELETE_CONDITIONAL_LIMIT": {
      "type": "string",
      "pattern": "[0-9]{3}",
      "description": "Maximum total number of records to delete in a single conditional delete operation",
      "default": "20"
    },
    "API_URL": {
      "type": "string",
      "description": "Current url where API is hosted from (used in operation execution clients)."
    },
    "AWS_REGION": {
      "type": "string",
      "description": "AWS Region where you want lambdas to be executed from."
    },
    "AWS_LAMBDA_ROLE": {
      "type": "string",
      "description": "Execution role of lambda functions."
    },
    "AWS_LAMBDA_ACCESS_KEY_ID": {
      "type": "string",
      "description": "Access key id for lambda (must have permission to invoke and create lambda functions)"
    },
    "AWS_LAMBDA_ACCESS_KEY_SECRET": {
      "type": "string",
      "description": "Access key secret for lambda (must have permission to invoke and create lambda functions)."
    },
    "AWS_LAMBDA_LAYER_ARN": {
      "type": "string",
      "description": "ARN Layer for lambda (current expectation is layer installed with all @iguhealth packages)."
    },
    "AUTH_PUBLIC_ACCESS": {
      "type": "string",
      "enum": [
        "true",
        "false"
      ],
      "description": "Sets the server to allow full public access when set to true.",
      "default": "false"
    },
    "AUTH_ALLOW_GLOBAL_SIGNUP": {
      "type": "string",
      "enum": [
        "true",
        "false"
      ],
      "description": "Sets whether to allow global signup for users.",
      "default": "false"
    },
    "AUTH_ALLOW_TENANT_SIGNUP": {
      "type": "string",
      "enum": [
        "true",
        "false"
      ],
      "description": "Sets whether to allow tenant signup for users.",
      "default": "false"
    },
    "AUTH_ISSUER": {
      "type": "string",
      "description": "The issuer of the tokens"
    },
    "AUTH_CERTIFICATION_TYPE": {
      "type": "string",
      "enum": [
        "file",
        "environment"
      ]
    },
    "AUTH_CERTIFICATION_PRIVATE_KEY": {
      "type": "string"
    },
    "AUTH_CERTIFICATION_PUBLIC_KEY": {
      "type": "string"
    },
    "AUTH_LOCAL_CERTIFICATION_LOCATION": {
      "type": "string",
      "description": "IF Certification is type file, this is the location of the certification files."
    },
    "AUTH_LOCAL_SIGNING_KEY": {
      "type": "string",
      "description": "The signing key used to generate new local tokens"
    },
    "EMAIL_PROVIDER": {
      "type": "string",
      "enum": [
        "sendgrid"
      ],
      "description": "Set the email provider."
    },
    "EMAIL_SENDGRID_API_KEY": {
      "type": "string",
      "description": "Set the sendgrid api key (only used on email provider set to sendgrid)."
    },
    "EMAIL_FROM": {
      "type": "string",
      "description": "Set the email from address."
    },
    "ENCRYPTION_TYPE": {
      "type": "string",
      "enum": [
        "aws"
      ],
      "description": "The type of encryption (used to encrypt user secrets)"
    },
    "AWS_KMS_ACCESS_KEY_ID": {
      "type": "string",
      "description": "KMS client access key ID"
    },
    "AWS_KMS_ACCESS_KEY_SECRET": {
      "type": "string",
      "description": "KMS client access key secret"
    },
    "AWS_ENCRYPTION_GENERATOR_KEY": {
      "type": "string",
      "description": "KMS key used to generate data keys on keyring"
    },
    "AWS_ENCRYPTION_KEY": {
      "type": "string",
      "description": "Additional KMS key used for encryption"
    },
    "POSTGRES_TRANSACTION_ENTRY_LIMIT": {
      "type": "string",
      "pattern": "[0-9]{2}",
      "description": "Postgres transaction entry limit",
      "default": "20"
    },
    "SENTRY_SERVER_DSN": {
      "type": "string",
      "description": "Sentry DSN URL for monitoring errors and performance."
    },
    "SENTRY_WORKER_DSN": {
      "type": "string",
      "description": "Sentry Worker for monitoring errors and performance on worker"
    },
    "SENTRY_TRACES_SAMPLE_RATE": {
      "type": "string",
      "description": "Sentry sample rate."
    },
    "SENTRY_PROFILES_SAMPLE_RATE": {
      "type": "string",
      "description": "Sentry profiles rate."
    },
    "ADMIN_APP_REDIRECT_URI": {
      "type": "string",
      "description": "Redirect URI for admin app",
      "pattern": "^(http|https):\\/\\/\\*\\..+$"
    },
    "PROXY": {
      "type": "string",
      "enum": [
        "true",
        "false"
      ],
      "description": "Whether behind proxy and server should use X-Forwarded-For header.",
      "default": "false"
    },
    "PROXY_IP_HEADER": {
      "type": "string",
      "description": "Header to derive the users IP address from",
      "default": "false"
    }
  },
  "$defs": {
    "resource-store-pg": {
      "type": "object",
      "properties": {
        "RESOURCE_STORE_PG_NAME": {
          "type": "string",
          "description": "Postgres database name. ",
          "default": "iguhealth"
        },
        "RESOURCE_STORE_PG_HOST": {
          "type": "string",
          "description": "Postgres host",
          "default": "localhost"
        },
        "RESOURCE_STORE_PG_PORT": {
          "type": "string",
          "pattern": "[0-9]{4}",
          "description": "Postgres port",
          "default": "5432"
        },
        "RESOURCE_STORE_PG_SSL": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ],
          "description": "Whether Postgres connection is SSL",
          "default": "false"
        },
        "RESOURCE_STORE_PG_PASSWORD": {
          "type": "string",
          "description": "postgres password",
          "default": ""
        },
        "RESOURCE_STORE_PG_USERNAME": {
          "type": "string",
          "description": "postgres username",
          "default": "postgres"
        }
      }
    },
    "search-store-pg": {
      "type": "object",
      "properties": {
        "SEARCH_STORE_PG_NAME": {
          "type": "string",
          "description": "Postgres database name. ",
          "default": "iguhealth"
        },
        "SEARCH_STORE_PG_HOST": {
          "type": "string",
          "description": "Postgres host",
          "default": "localhost"
        },
        "SEARCH_STORE_PG_PORT": {
          "type": "string",
          "pattern": "[0-9]{4}",
          "description": "Postgres port",
          "default": "5432"
        },
        "SEARCH_STORE_PG_SSL": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ],
          "description": "Whether Postgres connection is SSL",
          "default": "false"
        },
        "SEARCH_STORE_PG_PASSWORD": {
          "type": "string",
          "description": "postgres password",
          "default": ""
        },
        "SEARCH_STORE_PG_USERNAME": {
          "type": "string",
          "description": "postgres username",
          "default": "postgres"
        }
      }
    },
    "artifact-pg": {
      "type": "object",
      "properties": {
        "ARTIFACT_DB_PG_NAME": {
          "type": "string",
          "description": "Postgres database name. ",
          "default": "iguhealth"
        },
        "ARTIFACT_DB_PG_HOST": {
          "type": "string",
          "description": "Postgres host",
          "default": "localhost"
        },
        "ARTIFACT_DB_PG_PORT": {
          "type": "string",
          "pattern": "[0-9]{4}",
          "description": "Postgres port",
          "default": "5432"
        },
        "ARTIFACT_DB_PG_SSL": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ],
          "description": "Whether Postgres connection is SSL",
          "default": "false"
        },
        "ARTIFACT_DB_PG_PASSWORD": {
          "type": "string",
          "description": "postgres password",
          "default": ""
        },
        "ARTIFACT_DB_PG_USERNAME": {
          "type": "string",
          "description": "postgres username",
          "default": "postgres"
        }
      }
    },
    "queue-kafka": {
      "type": "object",
      "properties": {
        "KAFKA_QUEUE_BROKERS": {
          "type": "string",
          "description": "Kafka brokers"
        },
        "KAFKA_QUEUE_CLIENT_ID": {
          "type": "string",
          "description": "Kafka client id"
        }
      }
    },
    "queue-pg": {
      "type": "object",
      "properties": {
        "QUEUE_DB_PG_NAME": {
          "type": "string",
          "description": "Postgres database name. ",
          "default": "iguhealth"
        },
        "QUEUE_DB_PG_HOST": {
          "type": "string",
          "description": "Postgres host",
          "default": "localhost"
        },
        "QUEUE_DB_PG_PORT": {
          "type": "string",
          "pattern": "[0-9]{4}",
          "description": "Postgres port",
          "default": "5432"
        },
        "QUEUE_DB_PG_SSL": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ],
          "description": "Whether Postgres connection is SSL",
          "default": "false"
        },
        "QUEUE_DB_PG_PASSWORD": {
          "type": "string",
          "description": "postgres password",
          "default": ""
        },
        "QUEUE_DB_PG_USERNAME": {
          "type": "string",
          "description": "postgres username",
          "default": "postgres"
        }
      }
    }
  }
}