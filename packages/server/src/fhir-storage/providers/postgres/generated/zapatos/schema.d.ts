/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type code_type = 'oauth2_code_grant' | 'password_reset';
  export namespace every {
    export type code_type = ['oauth2_code_grant', 'password_reset'];
  }
  export type fhir_version = 'r4' | 'r4b' | 'r5';
  export namespace every {
    export type fhir_version = ['r4', 'r4b', 'r5'];
  }
  export type limitation_type = 'LIMIT_TOTAL';
  export namespace every {
    export type limitation_type = ['LIMIT_TOTAL'];
  }
  export type user_role = 'admin' | 'member' | 'owner';
  export namespace every {
    export type user_role = ['admin', 'member', 'owner'];
  }
  export type user_scope = 'global' | 'tenant';
  export namespace every {
    export type user_scope = ['global', 'tenant'];
  }

  /* --- tables --- */

  /**
   * **auth_method**
   * - Table in database
   */
  export namespace auth_method {
    export type Table = 'auth_method';
    export interface Selectable {
      /**
      * **auth_method.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **auth_method.method**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      method: string;
    }
    export interface JSONSelectable {
      /**
      * **auth_method.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **auth_method.method**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      method: string;
    }
    export interface Whereable {
      /**
      * **auth_method.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **auth_method.method**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      method?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **auth_method.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **auth_method.method**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      method: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **auth_method.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **auth_method.method**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      method?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'auth_method_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **authorization_code**
   * - Table in database
   */
  export namespace authorization_code {
    export type Table = 'authorization_code';
    export interface Selectable {
      /**
      * **authorization_code.client_id**
      * - `text` in database
      * - Nullable, no default
      */
      client_id: string | null;
      /**
      * **authorization_code.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code: string;
      /**
      * **authorization_code.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **authorization_code.expires_in**
      * - `interval` in database
      * - `NOT NULL`, no default
      */
      expires_in: string;
      /**
      * **authorization_code.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **authorization_code.payload**
      * - `jsonb` in database
      * - Nullable, no default
      */
      payload: db.JSONValue | null;
      /**
      * **authorization_code.scope**
      * - `user_scope` in database
      * - `NOT NULL`, default: `'global'::user_scope`
      */
      scope: user_scope;
      /**
      * **authorization_code.tenant**
      * - `text` in database
      * - Nullable, no default
      */
      tenant: string | null;
      /**
      * **authorization_code.type**
      * - `code_type` in database
      * - `NOT NULL`, no default
      */
      type: code_type;
      /**
      * **authorization_code.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
    }
    export interface JSONSelectable {
      /**
      * **authorization_code.client_id**
      * - `text` in database
      * - Nullable, no default
      */
      client_id: string | null;
      /**
      * **authorization_code.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code: string;
      /**
      * **authorization_code.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **authorization_code.expires_in**
      * - `interval` in database
      * - `NOT NULL`, no default
      */
      expires_in: string;
      /**
      * **authorization_code.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **authorization_code.payload**
      * - `jsonb` in database
      * - Nullable, no default
      */
      payload: db.JSONValue | null;
      /**
      * **authorization_code.scope**
      * - `user_scope` in database
      * - `NOT NULL`, default: `'global'::user_scope`
      */
      scope: user_scope;
      /**
      * **authorization_code.tenant**
      * - `text` in database
      * - Nullable, no default
      */
      tenant: string | null;
      /**
      * **authorization_code.type**
      * - `code_type` in database
      * - `NOT NULL`, no default
      */
      type: code_type;
      /**
      * **authorization_code.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string;
    }
    export interface Whereable {
      /**
      * **authorization_code.client_id**
      * - `text` in database
      * - Nullable, no default
      */
      client_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authorization_code.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authorization_code.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authorization_code.expires_in**
      * - `interval` in database
      * - `NOT NULL`, no default
      */
      expires_in?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authorization_code.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authorization_code.payload**
      * - `jsonb` in database
      * - Nullable, no default
      */
      payload?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authorization_code.scope**
      * - `user_scope` in database
      * - `NOT NULL`, default: `'global'::user_scope`
      */
      scope?: user_scope | db.Parameter<user_scope> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, user_scope | db.Parameter<user_scope> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authorization_code.tenant**
      * - `text` in database
      * - Nullable, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authorization_code.type**
      * - `code_type` in database
      * - `NOT NULL`, no default
      */
      type?: code_type | db.Parameter<code_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, code_type | db.Parameter<code_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authorization_code.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **authorization_code.client_id**
      * - `text` in database
      * - Nullable, no default
      */
      client_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **authorization_code.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **authorization_code.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **authorization_code.expires_in**
      * - `interval` in database
      * - `NOT NULL`, no default
      */
      expires_in: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **authorization_code.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **authorization_code.payload**
      * - `jsonb` in database
      * - Nullable, no default
      */
      payload?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **authorization_code.scope**
      * - `user_scope` in database
      * - `NOT NULL`, default: `'global'::user_scope`
      */
      scope?: user_scope | db.Parameter<user_scope> | db.DefaultType | db.SQLFragment;
      /**
      * **authorization_code.tenant**
      * - `text` in database
      * - Nullable, no default
      */
      tenant?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **authorization_code.type**
      * - `code_type` in database
      * - `NOT NULL`, no default
      */
      type: code_type | db.Parameter<code_type> | db.SQLFragment;
      /**
      * **authorization_code.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **authorization_code.client_id**
      * - `text` in database
      * - Nullable, no default
      */
      client_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **authorization_code.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **authorization_code.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **authorization_code.expires_in**
      * - `interval` in database
      * - `NOT NULL`, no default
      */
      expires_in?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **authorization_code.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **authorization_code.payload**
      * - `jsonb` in database
      * - Nullable, no default
      */
      payload?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **authorization_code.scope**
      * - `user_scope` in database
      * - `NOT NULL`, default: `'global'::user_scope`
      */
      scope?: user_scope | db.Parameter<user_scope> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, user_scope | db.Parameter<user_scope> | db.DefaultType | db.SQLFragment>;
      /**
      * **authorization_code.tenant**
      * - `text` in database
      * - Nullable, no default
      */
      tenant?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **authorization_code.type**
      * - `code_type` in database
      * - `NOT NULL`, no default
      */
      type?: code_type | db.Parameter<code_type> | db.SQLFragment | db.SQLFragment<any, code_type | db.Parameter<code_type> | db.SQLFragment>;
      /**
      * **authorization_code.user_id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      user_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'authorization_code_code_key' | 'authorization_code_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **limitations**
   * - Table in database
   */
  export namespace limitations {
    export type Table = 'limitations';
    export interface Selectable {
      /**
      * **limitations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **limitations.fhir_version**
      * - `fhir_version` in database
      * - `NOT NULL`, no default
      */
      fhir_version: fhir_version;
      /**
      * **limitations.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **limitations.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **limitations.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **limitations.tier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tier: string;
      /**
      * **limitations.type**
      * - `limitation_type` in database
      * - `NOT NULL`, no default
      */
      type: limitation_type;
      /**
      * **limitations.value**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      value: number;
    }
    export interface JSONSelectable {
      /**
      * **limitations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **limitations.fhir_version**
      * - `fhir_version` in database
      * - `NOT NULL`, no default
      */
      fhir_version: fhir_version;
      /**
      * **limitations.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **limitations.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **limitations.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **limitations.tier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tier: string;
      /**
      * **limitations.type**
      * - `limitation_type` in database
      * - `NOT NULL`, no default
      */
      type: limitation_type;
      /**
      * **limitations.value**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      value: number;
    }
    export interface Whereable {
      /**
      * **limitations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **limitations.fhir_version**
      * - `fhir_version` in database
      * - `NOT NULL`, no default
      */
      fhir_version?: fhir_version | db.Parameter<fhir_version> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, fhir_version | db.Parameter<fhir_version> | db.SQLFragment | db.ParentColumn>;
      /**
      * **limitations.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **limitations.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **limitations.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **limitations.tier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **limitations.type**
      * - `limitation_type` in database
      * - `NOT NULL`, no default
      */
      type?: limitation_type | db.Parameter<limitation_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, limitation_type | db.Parameter<limitation_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **limitations.value**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      value?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **limitations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **limitations.fhir_version**
      * - `fhir_version` in database
      * - `NOT NULL`, no default
      */
      fhir_version: fhir_version | db.Parameter<fhir_version> | db.SQLFragment;
      /**
      * **limitations.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **limitations.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **limitations.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **limitations.tier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tier: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **limitations.type**
      * - `limitation_type` in database
      * - `NOT NULL`, no default
      */
      type: limitation_type | db.Parameter<limitation_type> | db.SQLFragment;
      /**
      * **limitations.value**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      value: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **limitations.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **limitations.fhir_version**
      * - `fhir_version` in database
      * - `NOT NULL`, no default
      */
      fhir_version?: fhir_version | db.Parameter<fhir_version> | db.SQLFragment | db.SQLFragment<any, fhir_version | db.Parameter<fhir_version> | db.SQLFragment>;
      /**
      * **limitations.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **limitations.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **limitations.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **limitations.tier**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **limitations.type**
      * - `limitation_type` in database
      * - `NOT NULL`, no default
      */
      type?: limitation_type | db.Parameter<limitation_type> | db.SQLFragment | db.SQLFragment<any, limitation_type | db.Parameter<limitation_type> | db.SQLFragment>;
      /**
      * **limitations.value**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      value?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'limitations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **migrations**
   * - Table in database
   */
  export namespace migrations {
    export type Table = 'migrations';
    export interface Selectable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('migrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **migrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: Date;
    }
    export interface JSONSelectable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('migrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **migrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **migrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **migrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('migrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **migrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **migrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **migrations_state**
   * - Table in database
   */
  export namespace migrations_state {
    export type Table = 'migrations_state';
    export interface Selectable {
      /**
      * **migrations_state.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **migrations_state.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: Date;
      /**
      * **migrations_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
    }
    export interface JSONSelectable {
      /**
      * **migrations_state.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **migrations_state.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: db.TimestampString;
      /**
      * **migrations_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
    }
    export interface Whereable {
      /**
      * **migrations_state.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations_state.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **migrations_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **migrations_state.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **migrations_state.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
      /**
      * **migrations_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **migrations_state.key**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **migrations_state.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
      /**
      * **migrations_state.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'migrations_state_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4_date_idx**
   * - Table in database
   */
  export namespace r4_date_idx {
    export type Table = 'r4_date_idx';
    export interface Selectable {
      /**
      * **r4_date_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4_date_idx.end_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      end_date: Date;
      /**
      * **r4_date_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('date_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_date_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_date_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_date_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_date_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('date_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_date_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_date_idx.start_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date: Date;
      /**
      * **r4_date_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface JSONSelectable {
      /**
      * **r4_date_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4_date_idx.end_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      end_date: db.TimestampTzString;
      /**
      * **r4_date_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('date_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_date_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_date_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_date_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_date_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('date_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_date_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_date_idx.start_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date: db.TimestampTzString;
      /**
      * **r4_date_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface Whereable {
      /**
      * **r4_date_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_date_idx.end_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      end_date?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_date_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('date_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_date_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_date_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_date_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_date_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('date_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_date_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_date_idx.start_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_date_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4_date_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_date_idx.end_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      end_date: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **r4_date_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('date_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_date_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_date_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_date_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_date_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('date_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_date_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_date_idx.start_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **r4_date_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4_date_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_date_idx.end_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      end_date?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **r4_date_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('date_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_date_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_date_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_date_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_date_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('date_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_date_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_date_idx.start_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **r4_date_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'date_idx_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4_number_idx**
   * - Table in database
   */
  export namespace r4_number_idx {
    export type Table = 'r4_number_idx';
    export interface Selectable {
      /**
      * **r4_number_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4_number_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('number_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_number_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_number_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_number_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_number_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('number_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_number_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_number_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4_number_idx.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: db.NumericString;
    }
    export interface JSONSelectable {
      /**
      * **r4_number_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4_number_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('number_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_number_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_number_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_number_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_number_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('number_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_number_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_number_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4_number_idx.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: number;
    }
    export interface Whereable {
      /**
      * **r4_number_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_number_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('number_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_number_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_number_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_number_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_number_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('number_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_number_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_number_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_number_idx.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4_number_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_number_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('number_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_number_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_number_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_number_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_number_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('number_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_number_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_number_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_number_idx.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4_number_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_number_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('number_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_number_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_number_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_number_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_number_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('number_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_number_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_number_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_number_idx.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'number_idx_pkey' | 'number_idx_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4_quantity_idx**
   * - Table in database
   */
  export namespace r4_quantity_idx {
    export type Table = 'r4_quantity_idx';
    export interface Selectable {
      /**
      * **r4_quantity_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4_quantity_idx.end_code**
      * - `text` in database
      * - Nullable, no default
      */
      end_code: string | null;
      /**
      * **r4_quantity_idx.end_system**
      * - `text` in database
      * - Nullable, no default
      */
      end_system: string | null;
      /**
      * **r4_quantity_idx.end_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      end_value: db.NumericString | null;
      /**
      * **r4_quantity_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('quantity_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_quantity_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_quantity_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_quantity_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_quantity_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('quantity_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_quantity_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_quantity_idx.start_code**
      * - `text` in database
      * - Nullable, no default
      */
      start_code: string | null;
      /**
      * **r4_quantity_idx.start_system**
      * - `text` in database
      * - Nullable, no default
      */
      start_system: string | null;
      /**
      * **r4_quantity_idx.start_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      start_value: db.NumericString | null;
      /**
      * **r4_quantity_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface JSONSelectable {
      /**
      * **r4_quantity_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4_quantity_idx.end_code**
      * - `text` in database
      * - Nullable, no default
      */
      end_code: string | null;
      /**
      * **r4_quantity_idx.end_system**
      * - `text` in database
      * - Nullable, no default
      */
      end_system: string | null;
      /**
      * **r4_quantity_idx.end_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      end_value: number | null;
      /**
      * **r4_quantity_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('quantity_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_quantity_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_quantity_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_quantity_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_quantity_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('quantity_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_quantity_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_quantity_idx.start_code**
      * - `text` in database
      * - Nullable, no default
      */
      start_code: string | null;
      /**
      * **r4_quantity_idx.start_system**
      * - `text` in database
      * - Nullable, no default
      */
      start_system: string | null;
      /**
      * **r4_quantity_idx.start_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      start_value: number | null;
      /**
      * **r4_quantity_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface Whereable {
      /**
      * **r4_quantity_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.end_code**
      * - `text` in database
      * - Nullable, no default
      */
      end_code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.end_system**
      * - `text` in database
      * - Nullable, no default
      */
      end_system?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.end_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      end_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('quantity_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('quantity_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.start_code**
      * - `text` in database
      * - Nullable, no default
      */
      start_code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.start_system**
      * - `text` in database
      * - Nullable, no default
      */
      start_system?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.start_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      start_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_quantity_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4_quantity_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_quantity_idx.end_code**
      * - `text` in database
      * - Nullable, no default
      */
      end_code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4_quantity_idx.end_system**
      * - `text` in database
      * - Nullable, no default
      */
      end_system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4_quantity_idx.end_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      end_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4_quantity_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('quantity_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_quantity_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_quantity_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_quantity_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_quantity_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('quantity_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_quantity_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_quantity_idx.start_code**
      * - `text` in database
      * - Nullable, no default
      */
      start_code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4_quantity_idx.start_system**
      * - `text` in database
      * - Nullable, no default
      */
      start_system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4_quantity_idx.start_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      start_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4_quantity_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4_quantity_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_quantity_idx.end_code**
      * - `text` in database
      * - Nullable, no default
      */
      end_code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_quantity_idx.end_system**
      * - `text` in database
      * - Nullable, no default
      */
      end_system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_quantity_idx.end_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      end_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_quantity_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('quantity_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_quantity_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_quantity_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_quantity_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_quantity_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('quantity_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_quantity_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_quantity_idx.start_code**
      * - `text` in database
      * - Nullable, no default
      */
      start_code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_quantity_idx.start_system**
      * - `text` in database
      * - Nullable, no default
      */
      start_system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_quantity_idx.start_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      start_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_quantity_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'quantity_idx_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4_reference_idx**
   * - Table in database
   */
  export namespace r4_reference_idx {
    export type Table = 'r4_reference_idx';
    export interface Selectable {
      /**
      * **r4_reference_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4_reference_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('reference_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_reference_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_reference_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_reference_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_reference_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('reference_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_reference_idx.reference**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      reference: db.JSONValue;
      /**
      * **r4_reference_idx.reference_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_id: string;
      /**
      * **r4_reference_idx.reference_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_type: string;
      /**
      * **r4_reference_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_reference_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface JSONSelectable {
      /**
      * **r4_reference_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4_reference_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('reference_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_reference_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_reference_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_reference_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_reference_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('reference_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_reference_idx.reference**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      reference: db.JSONValue;
      /**
      * **r4_reference_idx.reference_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_id: string;
      /**
      * **r4_reference_idx.reference_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_type: string;
      /**
      * **r4_reference_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_reference_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface Whereable {
      /**
      * **r4_reference_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_reference_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('reference_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_reference_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_reference_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_reference_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_reference_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('reference_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_reference_idx.reference**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      reference?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_reference_idx.reference_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_reference_idx.reference_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_reference_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_reference_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4_reference_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_reference_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('reference_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_reference_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_reference_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_reference_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_reference_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('reference_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_reference_idx.reference**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      reference: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **r4_reference_idx.reference_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_reference_idx.reference_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_reference_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_reference_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4_reference_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_reference_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('reference_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_reference_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_reference_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_reference_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_reference_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('reference_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_reference_idx.reference**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      reference?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **r4_reference_idx.reference_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_reference_idx.reference_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_reference_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_reference_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'reference_idx_pkey' | 'reference_idx_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4_string_idx**
   * - Table in database
   */
  export namespace r4_string_idx {
    export type Table = 'r4_string_idx';
    export interface Selectable {
      /**
      * **r4_string_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4_string_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('string_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_string_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_string_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_string_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_string_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('string_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_string_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_string_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4_string_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
    }
    export interface JSONSelectable {
      /**
      * **r4_string_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4_string_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('string_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_string_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_string_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_string_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_string_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('string_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_string_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_string_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4_string_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
    }
    export interface Whereable {
      /**
      * **r4_string_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_string_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('string_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_string_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_string_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_string_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_string_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('string_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_string_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_string_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_string_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4_string_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_string_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('string_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_string_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_string_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_string_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_string_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('string_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_string_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_string_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_string_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4_string_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_string_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('string_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_string_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_string_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_string_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_string_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('string_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_string_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_string_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_string_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'string_idx_pkey' | 'string_idx_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4_token_idx**
   * - Table in database
   */
  export namespace r4_token_idx {
    export type Table = 'r4_token_idx';
    export interface Selectable {
      /**
      * **r4_token_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4_token_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('token_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_token_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_token_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_token_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_token_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('token_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_token_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_token_idx.system**
      * - `text` in database
      * - Nullable, no default
      */
      system: string | null;
      /**
      * **r4_token_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4_token_idx.value**
      * - `text` in database
      * - Nullable, no default
      */
      value: string | null;
    }
    export interface JSONSelectable {
      /**
      * **r4_token_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4_token_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('token_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_token_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_token_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_token_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_token_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('token_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_token_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_token_idx.system**
      * - `text` in database
      * - Nullable, no default
      */
      system: string | null;
      /**
      * **r4_token_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4_token_idx.value**
      * - `text` in database
      * - Nullable, no default
      */
      value: string | null;
    }
    export interface Whereable {
      /**
      * **r4_token_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_token_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('token_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_token_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_token_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_token_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_token_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('token_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_token_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_token_idx.system**
      * - `text` in database
      * - Nullable, no default
      */
      system?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_token_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_token_idx.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4_token_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_token_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('token_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_token_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_token_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_token_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_token_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('token_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_token_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_token_idx.system**
      * - `text` in database
      * - Nullable, no default
      */
      system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4_token_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_token_idx.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4_token_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_token_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('token_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_token_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_token_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_token_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_token_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('token_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_token_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_token_idx.system**
      * - `text` in database
      * - Nullable, no default
      */
      system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_token_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_token_idx.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'token_idx_pkey' | 'token_idx_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4_uri_idx**
   * - Table in database
   */
  export namespace r4_uri_idx {
    export type Table = 'r4_uri_idx';
    export interface Selectable {
      /**
      * **r4_uri_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4_uri_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('uri_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_uri_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_uri_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_uri_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_uri_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('uri_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_uri_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_uri_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4_uri_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
    }
    export interface JSONSelectable {
      /**
      * **r4_uri_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4_uri_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('uri_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4_uri_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4_uri_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4_uri_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4_uri_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('uri_idx_r_version_id_seq'::regclass)`
      */
      r_version_id: number;
      /**
      * **r4_uri_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4_uri_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4_uri_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
    }
    export interface Whereable {
      /**
      * **r4_uri_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_uri_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('uri_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_uri_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_uri_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_uri_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_uri_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('uri_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_uri_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_uri_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4_uri_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4_uri_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_uri_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('uri_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_uri_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_uri_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_uri_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_uri_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('uri_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4_uri_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_uri_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4_uri_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4_uri_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_uri_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('uri_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_uri_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_uri_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_uri_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_uri_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('uri_idx_r_version_id_seq'::regclass)`
      */
      r_version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4_uri_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_uri_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4_uri_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'uri_idx_pkey' | 'uri_idx_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4b_date_idx**
   * - Table in database
   */
  export namespace r4b_date_idx {
    export type Table = 'r4b_date_idx';
    export interface Selectable {
      /**
      * **r4b_date_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4b_date_idx.end_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      end_date: Date;
      /**
      * **r4b_date_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_date_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_date_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_date_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_date_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_date_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_date_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_date_idx.start_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date: Date;
      /**
      * **r4b_date_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface JSONSelectable {
      /**
      * **r4b_date_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4b_date_idx.end_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      end_date: db.TimestampTzString;
      /**
      * **r4b_date_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_date_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_date_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_date_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_date_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_date_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_date_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_date_idx.start_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date: db.TimestampTzString;
      /**
      * **r4b_date_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface Whereable {
      /**
      * **r4b_date_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_date_idx.end_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      end_date?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_date_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_date_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_date_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_date_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_date_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_date_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_date_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_date_idx.start_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_date_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4b_date_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_date_idx.end_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      end_date: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **r4b_date_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_date_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_date_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_date_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_date_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_date_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **r4b_date_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_date_idx.start_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **r4b_date_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4b_date_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_date_idx.end_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      end_date?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **r4b_date_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_date_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_date_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_date_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_date_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_date_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **r4b_date_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_date_idx.start_date**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
      start_date?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **r4b_date_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'r4b_date_idx_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4b_number_idx**
   * - Table in database
   */
  export namespace r4b_number_idx {
    export type Table = 'r4b_number_idx';
    export interface Selectable {
      /**
      * **r4b_number_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4b_number_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_number_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_number_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_number_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_number_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_number_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_number_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_number_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4b_number_idx.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: db.NumericString;
    }
    export interface JSONSelectable {
      /**
      * **r4b_number_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4b_number_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_number_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_number_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_number_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_number_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_number_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_number_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_number_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4b_number_idx.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: number;
    }
    export interface Whereable {
      /**
      * **r4b_number_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_number_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_number_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_number_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_number_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_number_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_number_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_number_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_number_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_number_idx.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4b_number_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_number_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_number_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_number_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_number_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_number_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_number_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **r4b_number_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_number_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_number_idx.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4b_number_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_number_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_number_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_number_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_number_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_number_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_number_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **r4b_number_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_number_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_number_idx.value**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'r4b_number_idx_pkey' | 'r4b_number_idx_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4b_quantity_idx**
   * - Table in database
   */
  export namespace r4b_quantity_idx {
    export type Table = 'r4b_quantity_idx';
    export interface Selectable {
      /**
      * **r4b_quantity_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4b_quantity_idx.end_code**
      * - `text` in database
      * - Nullable, no default
      */
      end_code: string | null;
      /**
      * **r4b_quantity_idx.end_system**
      * - `text` in database
      * - Nullable, no default
      */
      end_system: string | null;
      /**
      * **r4b_quantity_idx.end_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      end_value: db.NumericString | null;
      /**
      * **r4b_quantity_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_quantity_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_quantity_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_quantity_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_quantity_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_quantity_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_quantity_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_quantity_idx.start_code**
      * - `text` in database
      * - Nullable, no default
      */
      start_code: string | null;
      /**
      * **r4b_quantity_idx.start_system**
      * - `text` in database
      * - Nullable, no default
      */
      start_system: string | null;
      /**
      * **r4b_quantity_idx.start_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      start_value: db.NumericString | null;
      /**
      * **r4b_quantity_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface JSONSelectable {
      /**
      * **r4b_quantity_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4b_quantity_idx.end_code**
      * - `text` in database
      * - Nullable, no default
      */
      end_code: string | null;
      /**
      * **r4b_quantity_idx.end_system**
      * - `text` in database
      * - Nullable, no default
      */
      end_system: string | null;
      /**
      * **r4b_quantity_idx.end_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      end_value: number | null;
      /**
      * **r4b_quantity_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_quantity_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_quantity_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_quantity_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_quantity_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_quantity_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_quantity_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_quantity_idx.start_code**
      * - `text` in database
      * - Nullable, no default
      */
      start_code: string | null;
      /**
      * **r4b_quantity_idx.start_system**
      * - `text` in database
      * - Nullable, no default
      */
      start_system: string | null;
      /**
      * **r4b_quantity_idx.start_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      start_value: number | null;
      /**
      * **r4b_quantity_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface Whereable {
      /**
      * **r4b_quantity_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.end_code**
      * - `text` in database
      * - Nullable, no default
      */
      end_code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.end_system**
      * - `text` in database
      * - Nullable, no default
      */
      end_system?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.end_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      end_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_quantity_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.start_code**
      * - `text` in database
      * - Nullable, no default
      */
      start_code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.start_system**
      * - `text` in database
      * - Nullable, no default
      */
      start_system?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.start_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      start_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_quantity_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4b_quantity_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_quantity_idx.end_code**
      * - `text` in database
      * - Nullable, no default
      */
      end_code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_quantity_idx.end_system**
      * - `text` in database
      * - Nullable, no default
      */
      end_system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_quantity_idx.end_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      end_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_quantity_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_quantity_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_quantity_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_quantity_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_quantity_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_quantity_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **r4b_quantity_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_quantity_idx.start_code**
      * - `text` in database
      * - Nullable, no default
      */
      start_code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_quantity_idx.start_system**
      * - `text` in database
      * - Nullable, no default
      */
      start_system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_quantity_idx.start_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      start_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_quantity_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4b_quantity_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.end_code**
      * - `text` in database
      * - Nullable, no default
      */
      end_code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.end_system**
      * - `text` in database
      * - Nullable, no default
      */
      end_system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.end_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      end_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_quantity_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.start_code**
      * - `text` in database
      * - Nullable, no default
      */
      start_code?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.start_system**
      * - `text` in database
      * - Nullable, no default
      */
      start_system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.start_value**
      * - `numeric` in database
      * - Nullable, no default
      */
      start_value?: (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.NumericString) | db.Parameter<(number | db.NumericString)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_quantity_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'r4b_quantity_idx_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4b_reference_idx**
   * - Table in database
   */
  export namespace r4b_reference_idx {
    export type Table = 'r4b_reference_idx';
    export interface Selectable {
      /**
      * **r4b_reference_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4b_reference_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_reference_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_reference_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_reference_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_reference_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_reference_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_reference_idx.reference**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      reference: db.JSONValue;
      /**
      * **r4b_reference_idx.reference_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_id: string;
      /**
      * **r4b_reference_idx.reference_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_type: string;
      /**
      * **r4b_reference_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_reference_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface JSONSelectable {
      /**
      * **r4b_reference_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4b_reference_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_reference_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_reference_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_reference_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_reference_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_reference_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_reference_idx.reference**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      reference: db.JSONValue;
      /**
      * **r4b_reference_idx.reference_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_id: string;
      /**
      * **r4b_reference_idx.reference_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_type: string;
      /**
      * **r4b_reference_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_reference_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
    }
    export interface Whereable {
      /**
      * **r4b_reference_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_reference_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_reference_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_reference_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_reference_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_reference_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_reference_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_reference_idx.reference**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      reference?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_reference_idx.reference_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_reference_idx.reference_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_reference_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_reference_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4b_reference_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_reference_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_reference_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_reference_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_reference_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_reference_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_reference_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **r4b_reference_idx.reference**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      reference: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **r4b_reference_idx.reference_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_reference_idx.reference_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_reference_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_reference_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4b_reference_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_reference_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_reference_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_reference_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_reference_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_reference_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_reference_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **r4b_reference_idx.reference**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      reference?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **r4b_reference_idx.reference_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_reference_idx.reference_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      reference_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_reference_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_reference_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'r4b_reference_idx_pkey' | 'r4b_reference_idx_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4b_string_idx**
   * - Table in database
   */
  export namespace r4b_string_idx {
    export type Table = 'r4b_string_idx';
    export interface Selectable {
      /**
      * **r4b_string_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4b_string_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_string_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_string_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_string_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_string_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_string_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_string_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_string_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4b_string_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
    }
    export interface JSONSelectable {
      /**
      * **r4b_string_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4b_string_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_string_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_string_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_string_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_string_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_string_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_string_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_string_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4b_string_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
    }
    export interface Whereable {
      /**
      * **r4b_string_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_string_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_string_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_string_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_string_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_string_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_string_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_string_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_string_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_string_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4b_string_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_string_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_string_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_string_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_string_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_string_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_string_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **r4b_string_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_string_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_string_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4b_string_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_string_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_string_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_string_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_string_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_string_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_string_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **r4b_string_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_string_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_string_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'r4b_string_idx_pkey' | 'r4b_string_idx_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4b_token_idx**
   * - Table in database
   */
  export namespace r4b_token_idx {
    export type Table = 'r4b_token_idx';
    export interface Selectable {
      /**
      * **r4b_token_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4b_token_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_token_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_token_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_token_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_token_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_token_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_token_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_token_idx.system**
      * - `text` in database
      * - Nullable, no default
      */
      system: string | null;
      /**
      * **r4b_token_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4b_token_idx.value**
      * - `text` in database
      * - Nullable, no default
      */
      value: string | null;
    }
    export interface JSONSelectable {
      /**
      * **r4b_token_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4b_token_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_token_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_token_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_token_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_token_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_token_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_token_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_token_idx.system**
      * - `text` in database
      * - Nullable, no default
      */
      system: string | null;
      /**
      * **r4b_token_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4b_token_idx.value**
      * - `text` in database
      * - Nullable, no default
      */
      value: string | null;
    }
    export interface Whereable {
      /**
      * **r4b_token_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_token_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_token_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_token_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_token_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_token_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_token_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_token_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_token_idx.system**
      * - `text` in database
      * - Nullable, no default
      */
      system?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_token_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_token_idx.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4b_token_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_token_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_token_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_token_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_token_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_token_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_token_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **r4b_token_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_token_idx.system**
      * - `text` in database
      * - Nullable, no default
      */
      system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_token_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_token_idx.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4b_token_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_token_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_token_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_token_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_token_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_token_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_token_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **r4b_token_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_token_idx.system**
      * - `text` in database
      * - Nullable, no default
      */
      system?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_token_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_token_idx.value**
      * - `text` in database
      * - Nullable, no default
      */
      value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'r4b_token_idx_pkey' | 'r4b_token_idx_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **r4b_uri_idx**
   * - Table in database
   */
  export namespace r4b_uri_idx {
    export type Table = 'r4b_uri_idx';
    export interface Selectable {
      /**
      * **r4b_uri_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **r4b_uri_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_uri_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_uri_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_uri_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_uri_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_uri_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_uri_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_uri_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4b_uri_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
    }
    export interface JSONSelectable {
      /**
      * **r4b_uri_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **r4b_uri_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_uri_idx_id_seq'::regclass)`
      */
      id: number;
      /**
      * **r4b_uri_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string;
      /**
      * **r4b_uri_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string;
      /**
      * **r4b_uri_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string;
      /**
      * **r4b_uri_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number;
      /**
      * **r4b_uri_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string;
      /**
      * **r4b_uri_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **r4b_uri_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string;
    }
    export interface Whereable {
      /**
      * **r4b_uri_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_uri_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_uri_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_uri_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_uri_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_uri_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_uri_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_uri_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_uri_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **r4b_uri_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **r4b_uri_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_uri_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_uri_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **r4b_uri_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_uri_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_uri_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_uri_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **r4b_uri_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_uri_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **r4b_uri_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **r4b_uri_idx.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_uri_idx.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('r4b_uri_idx_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **r4b_uri_idx.parameter_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_uri_idx.parameter_url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parameter_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_uri_idx.r_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      r_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_uri_idx.r_version_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      r_version_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **r4b_uri_idx.resource_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_uri_idx.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **r4b_uri_idx.value**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      value?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'r4b_uri_idx_pkey' | 'r4b_uri_idx_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **resources**
   * - Table in database
   */
  export namespace resources {
    export type Table = 'resources';
    export interface Selectable {
      /**
      * **resources.author_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      author_id: string;
      /**
      * **resources.author_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      author_type: string;
      /**
      * **resources.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **resources.deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      deleted: boolean;
      /**
      * **resources.fhir_version**
      * - `fhir_version` in database
      * - `NOT NULL`, no default
      */
      fhir_version: fhir_version;
      /**
      * **resources.id**
      * - `text` in database
      * - Generated column
      */
      id: string;
      /**
      * **resources.patches**
      * - `jsonb` in database
      * - Nullable, no default
      */
      patches: db.JSONValue | null;
      /**
      * **resources.prev_version_id**
      * - `int8` in database
      * - Nullable, no default
      */
      prev_version_id: db.Int8String | null;
      /**
      * **resources.request_method**
      * - `varchar` in database
      * - Nullable, default: `'PUT'::character varying`
      */
      request_method: string | null;
      /**
      * **resources.resource**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      resource: db.JSONValue;
      /**
      * **resources.resource_type**
      * - `text` in database
      * - Generated column
      */
      resource_type: string;
      /**
      * **resources.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **resources.version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('resources_version_id_seq'::regclass)`
      */
      version_id: number;
    }
    export interface JSONSelectable {
      /**
      * **resources.author_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      author_id: string;
      /**
      * **resources.author_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      author_type: string;
      /**
      * **resources.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **resources.deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      deleted: boolean;
      /**
      * **resources.fhir_version**
      * - `fhir_version` in database
      * - `NOT NULL`, no default
      */
      fhir_version: fhir_version;
      /**
      * **resources.id**
      * - `text` in database
      * - Generated column
      */
      id: string;
      /**
      * **resources.patches**
      * - `jsonb` in database
      * - Nullable, no default
      */
      patches: db.JSONValue | null;
      /**
      * **resources.prev_version_id**
      * - `int8` in database
      * - Nullable, no default
      */
      prev_version_id: number | null;
      /**
      * **resources.request_method**
      * - `varchar` in database
      * - Nullable, default: `'PUT'::character varying`
      */
      request_method: string | null;
      /**
      * **resources.resource**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      resource: db.JSONValue;
      /**
      * **resources.resource_type**
      * - `text` in database
      * - Generated column
      */
      resource_type: string;
      /**
      * **resources.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string;
      /**
      * **resources.version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('resources_version_id_seq'::regclass)`
      */
      version_id: number;
    }
    export interface Whereable {
      /**
      * **resources.author_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      author_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.author_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      author_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      deleted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.fhir_version**
      * - `fhir_version` in database
      * - `NOT NULL`, no default
      */
      fhir_version?: fhir_version | db.Parameter<fhir_version> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, fhir_version | db.Parameter<fhir_version> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.id**
      * - `text` in database
      * - Generated column
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.patches**
      * - `jsonb` in database
      * - Nullable, no default
      */
      patches?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.prev_version_id**
      * - `int8` in database
      * - Nullable, no default
      */
      prev_version_id?: (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.request_method**
      * - `varchar` in database
      * - Nullable, default: `'PUT'::character varying`
      */
      request_method?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.resource**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      resource?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.resource_type**
      * - `text` in database
      * - Generated column
      */
      resource_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **resources.version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('resources_version_id_seq'::regclass)`
      */
      version_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **resources.author_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      author_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **resources.author_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      author_type: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **resources.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **resources.deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      deleted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **resources.fhir_version**
      * - `fhir_version` in database
      * - `NOT NULL`, no default
      */
      fhir_version: fhir_version | db.Parameter<fhir_version> | db.SQLFragment;
      /**
      * **resources.patches**
      * - `jsonb` in database
      * - Nullable, no default
      */
      patches?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **resources.prev_version_id**
      * - `int8` in database
      * - Nullable, no default
      */
      prev_version_id?: (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **resources.request_method**
      * - `varchar` in database
      * - Nullable, default: `'PUT'::character varying`
      */
      request_method?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **resources.resource**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      resource: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment;
      /**
      * **resources.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **resources.version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('resources_version_id_seq'::regclass)`
      */
      version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **resources.author_id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      author_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **resources.author_type**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      author_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **resources.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **resources.deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      deleted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **resources.fhir_version**
      * - `fhir_version` in database
      * - `NOT NULL`, no default
      */
      fhir_version?: fhir_version | db.Parameter<fhir_version> | db.SQLFragment | db.SQLFragment<any, fhir_version | db.Parameter<fhir_version> | db.SQLFragment>;
      /**
      * **resources.patches**
      * - `jsonb` in database
      * - Nullable, no default
      */
      patches?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **resources.prev_version_id**
      * - `int8` in database
      * - Nullable, no default
      */
      prev_version_id?: (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **resources.request_method**
      * - `varchar` in database
      * - Nullable, default: `'PUT'::character varying`
      */
      request_method?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **resources.resource**
      * - `jsonb` in database
      * - `NOT NULL`, no default
      */
      resource?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment>;
      /**
      * **resources.tenant**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **resources.version_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('resources_version_id_seq'::regclass)`
      */
      version_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'resources_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **subscription_tier**
   * - Table in database
   */
  export namespace subscription_tier {
    export type Table = 'subscription_tier';
    export interface Selectable {
      /**
      * **subscription_tier.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **subscription_tier.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **subscription_tier.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **subscription_tier.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **subscription_tier.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **subscription_tier.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **subscription_tier.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **subscription_tier.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **subscription_tier.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **subscription_tier.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **subscription_tier.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **subscription_tier.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **subscription_tier.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **subscription_tier.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **subscription_tier.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'subscription_tier_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **tenants**
   * - Table in database
   */
  export namespace tenants {
    export type Table = 'tenants';
    export interface Selectable {
      /**
      * **tenants.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **tenants.deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      deleted: boolean;
      /**
      * **tenants.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **tenants.subscription_tier**
      * - `text` in database
      * - `NOT NULL`, default: `'free'::text`
      */
      subscription_tier: string;
    }
    export interface JSONSelectable {
      /**
      * **tenants.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **tenants.deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      deleted: boolean;
      /**
      * **tenants.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **tenants.subscription_tier**
      * - `text` in database
      * - `NOT NULL`, default: `'free'::text`
      */
      subscription_tier: string;
    }
    export interface Whereable {
      /**
      * **tenants.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tenants.deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      deleted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tenants.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tenants.subscription_tier**
      * - `text` in database
      * - `NOT NULL`, default: `'free'::text`
      */
      subscription_tier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tenants.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **tenants.deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      deleted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **tenants.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **tenants.subscription_tier**
      * - `text` in database
      * - `NOT NULL`, default: `'free'::text`
      */
      subscription_tier?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tenants.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tenants.deleted**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      deleted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **tenants.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **tenants.subscription_tier**
      * - `text` in database
      * - `NOT NULL`, default: `'free'::text`
      */
      subscription_tier?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'workspaces_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **terminology_codes**
   * - Table in database
   */
  export namespace terminology_codes {
    export type Table = 'terminology_codes';
    export interface Selectable {
      /**
      * **terminology_codes.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code: string;
      /**
      * **terminology_codes.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **terminology_codes.display**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display: string;
      /**
      * **terminology_codes.system**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      system: string;
    }
    export interface JSONSelectable {
      /**
      * **terminology_codes.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code: string;
      /**
      * **terminology_codes.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **terminology_codes.display**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display: string;
      /**
      * **terminology_codes.system**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      system: string;
    }
    export interface Whereable {
      /**
      * **terminology_codes.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **terminology_codes.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **terminology_codes.display**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **terminology_codes.system**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      system?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **terminology_codes.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **terminology_codes.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **terminology_codes.display**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **terminology_codes.system**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      system: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **terminology_codes.code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      code?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **terminology_codes.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **terminology_codes.display**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      display?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **terminology_codes.system**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      system?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'terminology_codes_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **terminology_edge**
   * - Table in database
   */
  export namespace terminology_edge {
    export type Table = 'terminology_edge';
    export interface Selectable {
      /**
      * **terminology_edge.child_code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      child_code: string;
      /**
      * **terminology_edge.parent_code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_code: string;
      /**
      * **terminology_edge.system**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      system: string;
    }
    export interface JSONSelectable {
      /**
      * **terminology_edge.child_code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      child_code: string;
      /**
      * **terminology_edge.parent_code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_code: string;
      /**
      * **terminology_edge.system**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      system: string;
    }
    export interface Whereable {
      /**
      * **terminology_edge.child_code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      child_code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **terminology_edge.parent_code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **terminology_edge.system**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      system?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **terminology_edge.child_code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      child_code: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **terminology_edge.parent_code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_code: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **terminology_edge.system**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      system: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **terminology_edge.child_code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      child_code?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **terminology_edge.parent_code**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      parent_code?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **terminology_edge.system**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      system?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **terminology_systems**
   * - Table in database
   */
  export namespace terminology_systems {
    export type Table = 'terminology_systems';
    export interface Selectable {
      /**
      * **terminology_systems.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      url: string;
    }
    export interface JSONSelectable {
      /**
      * **terminology_systems.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      url: string;
    }
    export interface Whereable {
      /**
      * **terminology_systems.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **terminology_systems.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      url: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **terminology_systems.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'terminology_systems_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **users**
   * - Table in database
   */
  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **users.email_verified**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      email_verified: boolean | null;
      /**
      * **users.fhir_provider_id**
      * - `text` in database
      * - Nullable, no default
      */
      fhir_provider_id: string | null;
      /**
      * **users.fhir_user_id**
      * - `text` in database
      * - Nullable, no default
      */
      fhir_user_id: string | null;
      /**
      * **users.fhir_user_versionid**
      * - `int4` in database
      * - Nullable, no default
      */
      fhir_user_versionid: number | null;
      /**
      * **users.first_name**
      * - `text` in database
      * - Nullable, no default
      */
      first_name: string | null;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **users.last_name**
      * - `text` in database
      * - Nullable, no default
      */
      last_name: string | null;
      /**
      * **users.method**
      * - `text` in database
      * - `NOT NULL`, default: `'email-password'::text`
      */
      method: string;
      /**
      * **users.password**
      * - `text` in database
      * - Nullable, no default
      */
      password: string | null;
      /**
      * **users.phone_number**
      * - `text` in database
      * - Nullable, no default
      */
      phone_number: string | null;
      /**
      * **users.role**
      * - `user_role` in database
      * - Nullable, no default
      */
      role: user_role | null;
      /**
      * **users.scope**
      * - `user_scope` in database
      * - `NOT NULL`, default: `'global'::user_scope`
      */
      scope: user_scope;
      /**
      * **users.tenant**
      * - `text` in database
      * - Nullable, no default
      */
      tenant: string | null;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampTzString;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **users.email_verified**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      email_verified: boolean | null;
      /**
      * **users.fhir_provider_id**
      * - `text` in database
      * - Nullable, no default
      */
      fhir_provider_id: string | null;
      /**
      * **users.fhir_user_id**
      * - `text` in database
      * - Nullable, no default
      */
      fhir_user_id: string | null;
      /**
      * **users.fhir_user_versionid**
      * - `int4` in database
      * - Nullable, no default
      */
      fhir_user_versionid: number | null;
      /**
      * **users.first_name**
      * - `text` in database
      * - Nullable, no default
      */
      first_name: string | null;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id: string;
      /**
      * **users.last_name**
      * - `text` in database
      * - Nullable, no default
      */
      last_name: string | null;
      /**
      * **users.method**
      * - `text` in database
      * - `NOT NULL`, default: `'email-password'::text`
      */
      method: string;
      /**
      * **users.password**
      * - `text` in database
      * - Nullable, no default
      */
      password: string | null;
      /**
      * **users.phone_number**
      * - `text` in database
      * - Nullable, no default
      */
      phone_number: string | null;
      /**
      * **users.role**
      * - `user_role` in database
      * - Nullable, no default
      */
      role: user_role | null;
      /**
      * **users.scope**
      * - `user_scope` in database
      * - `NOT NULL`, default: `'global'::user_scope`
      */
      scope: user_scope;
      /**
      * **users.tenant**
      * - `text` in database
      * - Nullable, no default
      */
      tenant: string | null;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.email_verified**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      email_verified?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.fhir_provider_id**
      * - `text` in database
      * - Nullable, no default
      */
      fhir_provider_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.fhir_user_id**
      * - `text` in database
      * - Nullable, no default
      */
      fhir_user_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.fhir_user_versionid**
      * - `int4` in database
      * - Nullable, no default
      */
      fhir_user_versionid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.first_name**
      * - `text` in database
      * - Nullable, no default
      */
      first_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.last_name**
      * - `text` in database
      * - Nullable, no default
      */
      last_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.method**
      * - `text` in database
      * - `NOT NULL`, default: `'email-password'::text`
      */
      method?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.password**
      * - `text` in database
      * - Nullable, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.phone_number**
      * - `text` in database
      * - Nullable, no default
      */
      phone_number?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.role**
      * - `user_role` in database
      * - Nullable, no default
      */
      role?: user_role | db.Parameter<user_role> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, user_role | db.Parameter<user_role> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.scope**
      * - `user_scope` in database
      * - `NOT NULL`, default: `'global'::user_scope`
      */
      scope?: user_scope | db.Parameter<user_scope> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, user_scope | db.Parameter<user_scope> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.tenant**
      * - `text` in database
      * - Nullable, no default
      */
      tenant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.email_verified**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      email_verified?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.fhir_provider_id**
      * - `text` in database
      * - Nullable, no default
      */
      fhir_provider_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.fhir_user_id**
      * - `text` in database
      * - Nullable, no default
      */
      fhir_user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.fhir_user_versionid**
      * - `int4` in database
      * - Nullable, no default
      */
      fhir_user_versionid?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.first_name**
      * - `text` in database
      * - Nullable, no default
      */
      first_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **users.last_name**
      * - `text` in database
      * - Nullable, no default
      */
      last_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.method**
      * - `text` in database
      * - `NOT NULL`, default: `'email-password'::text`
      */
      method?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **users.password**
      * - `text` in database
      * - Nullable, no default
      */
      password?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.phone_number**
      * - `text` in database
      * - Nullable, no default
      */
      phone_number?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.role**
      * - `user_role` in database
      * - Nullable, no default
      */
      role?: user_role | db.Parameter<user_role> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.scope**
      * - `user_scope` in database
      * - `NOT NULL`, default: `'global'::user_scope`
      */
      scope?: user_scope | db.Parameter<user_scope> | db.DefaultType | db.SQLFragment;
      /**
      * **users.tenant**
      * - `text` in database
      * - Nullable, no default
      */
      tenant?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.email_verified**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      email_verified?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.fhir_provider_id**
      * - `text` in database
      * - Nullable, no default
      */
      fhir_provider_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.fhir_user_id**
      * - `text` in database
      * - Nullable, no default
      */
      fhir_user_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.fhir_user_versionid**
      * - `int4` in database
      * - Nullable, no default
      */
      fhir_user_versionid?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.first_name**
      * - `text` in database
      * - Nullable, no default
      */
      first_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.last_name**
      * - `text` in database
      * - Nullable, no default
      */
      last_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.method**
      * - `text` in database
      * - `NOT NULL`, default: `'email-password'::text`
      */
      method?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.password**
      * - `text` in database
      * - Nullable, no default
      */
      password?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.phone_number**
      * - `text` in database
      * - Nullable, no default
      */
      phone_number?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.role**
      * - `user_role` in database
      * - Nullable, no default
      */
      role?: user_role | db.Parameter<user_role> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, user_role | db.Parameter<user_role> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.scope**
      * - `user_scope` in database
      * - `NOT NULL`, default: `'global'::user_scope`
      */
      scope?: user_scope | db.Parameter<user_scope> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, user_scope | db.Parameter<user_scope> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.tenant**
      * - `text` in database
      * - Nullable, no default
      */
      tenant?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'tenant_owners_pkey' | 'unique_email';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = auth_method.Table | authorization_code.Table | limitations.Table | migrations.Table | migrations_state.Table | r4_date_idx.Table | r4_number_idx.Table | r4_quantity_idx.Table | r4_reference_idx.Table | r4_string_idx.Table | r4_token_idx.Table | r4_uri_idx.Table | r4b_date_idx.Table | r4b_number_idx.Table | r4b_quantity_idx.Table | r4b_reference_idx.Table | r4b_string_idx.Table | r4b_token_idx.Table | r4b_uri_idx.Table | resources.Table | subscription_tier.Table | tenants.Table | terminology_codes.Table | terminology_edge.Table | terminology_systems.Table | users.Table;
    export type Selectable = auth_method.Selectable | authorization_code.Selectable | limitations.Selectable | migrations.Selectable | migrations_state.Selectable | r4_date_idx.Selectable | r4_number_idx.Selectable | r4_quantity_idx.Selectable | r4_reference_idx.Selectable | r4_string_idx.Selectable | r4_token_idx.Selectable | r4_uri_idx.Selectable | r4b_date_idx.Selectable | r4b_number_idx.Selectable | r4b_quantity_idx.Selectable | r4b_reference_idx.Selectable | r4b_string_idx.Selectable | r4b_token_idx.Selectable | r4b_uri_idx.Selectable | resources.Selectable | subscription_tier.Selectable | tenants.Selectable | terminology_codes.Selectable | terminology_edge.Selectable | terminology_systems.Selectable | users.Selectable;
    export type JSONSelectable = auth_method.JSONSelectable | authorization_code.JSONSelectable | limitations.JSONSelectable | migrations.JSONSelectable | migrations_state.JSONSelectable | r4_date_idx.JSONSelectable | r4_number_idx.JSONSelectable | r4_quantity_idx.JSONSelectable | r4_reference_idx.JSONSelectable | r4_string_idx.JSONSelectable | r4_token_idx.JSONSelectable | r4_uri_idx.JSONSelectable | r4b_date_idx.JSONSelectable | r4b_number_idx.JSONSelectable | r4b_quantity_idx.JSONSelectable | r4b_reference_idx.JSONSelectable | r4b_string_idx.JSONSelectable | r4b_token_idx.JSONSelectable | r4b_uri_idx.JSONSelectable | resources.JSONSelectable | subscription_tier.JSONSelectable | tenants.JSONSelectable | terminology_codes.JSONSelectable | terminology_edge.JSONSelectable | terminology_systems.JSONSelectable | users.JSONSelectable;
    export type Whereable = auth_method.Whereable | authorization_code.Whereable | limitations.Whereable | migrations.Whereable | migrations_state.Whereable | r4_date_idx.Whereable | r4_number_idx.Whereable | r4_quantity_idx.Whereable | r4_reference_idx.Whereable | r4_string_idx.Whereable | r4_token_idx.Whereable | r4_uri_idx.Whereable | r4b_date_idx.Whereable | r4b_number_idx.Whereable | r4b_quantity_idx.Whereable | r4b_reference_idx.Whereable | r4b_string_idx.Whereable | r4b_token_idx.Whereable | r4b_uri_idx.Whereable | resources.Whereable | subscription_tier.Whereable | tenants.Whereable | terminology_codes.Whereable | terminology_edge.Whereable | terminology_systems.Whereable | users.Whereable;
    export type Insertable = auth_method.Insertable | authorization_code.Insertable | limitations.Insertable | migrations.Insertable | migrations_state.Insertable | r4_date_idx.Insertable | r4_number_idx.Insertable | r4_quantity_idx.Insertable | r4_reference_idx.Insertable | r4_string_idx.Insertable | r4_token_idx.Insertable | r4_uri_idx.Insertable | r4b_date_idx.Insertable | r4b_number_idx.Insertable | r4b_quantity_idx.Insertable | r4b_reference_idx.Insertable | r4b_string_idx.Insertable | r4b_token_idx.Insertable | r4b_uri_idx.Insertable | resources.Insertable | subscription_tier.Insertable | tenants.Insertable | terminology_codes.Insertable | terminology_edge.Insertable | terminology_systems.Insertable | users.Insertable;
    export type Updatable = auth_method.Updatable | authorization_code.Updatable | limitations.Updatable | migrations.Updatable | migrations_state.Updatable | r4_date_idx.Updatable | r4_number_idx.Updatable | r4_quantity_idx.Updatable | r4_reference_idx.Updatable | r4_string_idx.Updatable | r4_token_idx.Updatable | r4_uri_idx.Updatable | r4b_date_idx.Updatable | r4b_number_idx.Updatable | r4b_quantity_idx.Updatable | r4b_reference_idx.Updatable | r4b_string_idx.Updatable | r4b_token_idx.Updatable | r4b_uri_idx.Updatable | resources.Updatable | subscription_tier.Updatable | tenants.Updatable | terminology_codes.Updatable | terminology_edge.Updatable | terminology_systems.Updatable | users.Updatable;
    export type UniqueIndex = auth_method.UniqueIndex | authorization_code.UniqueIndex | limitations.UniqueIndex | migrations.UniqueIndex | migrations_state.UniqueIndex | r4_date_idx.UniqueIndex | r4_number_idx.UniqueIndex | r4_quantity_idx.UniqueIndex | r4_reference_idx.UniqueIndex | r4_string_idx.UniqueIndex | r4_token_idx.UniqueIndex | r4_uri_idx.UniqueIndex | r4b_date_idx.UniqueIndex | r4b_number_idx.UniqueIndex | r4b_quantity_idx.UniqueIndex | r4b_reference_idx.UniqueIndex | r4b_string_idx.UniqueIndex | r4b_token_idx.UniqueIndex | r4b_uri_idx.UniqueIndex | resources.UniqueIndex | subscription_tier.UniqueIndex | tenants.UniqueIndex | terminology_codes.UniqueIndex | terminology_edge.UniqueIndex | terminology_systems.UniqueIndex | users.UniqueIndex;
    export type Column = auth_method.Column | authorization_code.Column | limitations.Column | migrations.Column | migrations_state.Column | r4_date_idx.Column | r4_number_idx.Column | r4_quantity_idx.Column | r4_reference_idx.Column | r4_string_idx.Column | r4_token_idx.Column | r4_uri_idx.Column | r4b_date_idx.Column | r4b_number_idx.Column | r4b_quantity_idx.Column | r4b_reference_idx.Column | r4b_string_idx.Column | r4b_token_idx.Column | r4b_uri_idx.Column | resources.Column | subscription_tier.Column | tenants.Column | terminology_codes.Column | terminology_edge.Column | terminology_systems.Column | users.Column;
  
    export type AllBaseTables = [auth_method.Table, authorization_code.Table, limitations.Table, migrations.Table, migrations_state.Table, r4_date_idx.Table, r4_number_idx.Table, r4_quantity_idx.Table, r4_reference_idx.Table, r4_string_idx.Table, r4_token_idx.Table, r4_uri_idx.Table, r4b_date_idx.Table, r4b_number_idx.Table, r4b_quantity_idx.Table, r4b_reference_idx.Table, r4b_string_idx.Table, r4b_token_idx.Table, r4b_uri_idx.Table, resources.Table, subscription_tier.Table, tenants.Table, terminology_codes.Table, terminology_edge.Table, terminology_systems.Table, users.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [auth_method.Table, authorization_code.Table, limitations.Table, migrations.Table, migrations_state.Table, r4_date_idx.Table, r4_number_idx.Table, r4_quantity_idx.Table, r4_reference_idx.Table, r4_string_idx.Table, r4_token_idx.Table, r4_uri_idx.Table, r4b_date_idx.Table, r4b_number_idx.Table, r4b_quantity_idx.Table, r4b_reference_idx.Table, r4b_string_idx.Table, r4b_token_idx.Table, r4b_uri_idx.Table, resources.Table, subscription_tier.Table, tenants.Table, terminology_codes.Table, terminology_edge.Table, terminology_systems.Table, users.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "auth_method": auth_method.Selectable;
    "authorization_code": authorization_code.Selectable;
    "limitations": limitations.Selectable;
    "migrations": migrations.Selectable;
    "migrations_state": migrations_state.Selectable;
    "r4_date_idx": r4_date_idx.Selectable;
    "r4_number_idx": r4_number_idx.Selectable;
    "r4_quantity_idx": r4_quantity_idx.Selectable;
    "r4_reference_idx": r4_reference_idx.Selectable;
    "r4_string_idx": r4_string_idx.Selectable;
    "r4_token_idx": r4_token_idx.Selectable;
    "r4_uri_idx": r4_uri_idx.Selectable;
    "r4b_date_idx": r4b_date_idx.Selectable;
    "r4b_number_idx": r4b_number_idx.Selectable;
    "r4b_quantity_idx": r4b_quantity_idx.Selectable;
    "r4b_reference_idx": r4b_reference_idx.Selectable;
    "r4b_string_idx": r4b_string_idx.Selectable;
    "r4b_token_idx": r4b_token_idx.Selectable;
    "r4b_uri_idx": r4b_uri_idx.Selectable;
    "resources": resources.Selectable;
    "subscription_tier": subscription_tier.Selectable;
    "tenants": tenants.Selectable;
    "terminology_codes": terminology_codes.Selectable;
    "terminology_edge": terminology_edge.Selectable;
    "terminology_systems": terminology_systems.Selectable;
    "users": users.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "auth_method": auth_method.JSONSelectable;
    "authorization_code": authorization_code.JSONSelectable;
    "limitations": limitations.JSONSelectable;
    "migrations": migrations.JSONSelectable;
    "migrations_state": migrations_state.JSONSelectable;
    "r4_date_idx": r4_date_idx.JSONSelectable;
    "r4_number_idx": r4_number_idx.JSONSelectable;
    "r4_quantity_idx": r4_quantity_idx.JSONSelectable;
    "r4_reference_idx": r4_reference_idx.JSONSelectable;
    "r4_string_idx": r4_string_idx.JSONSelectable;
    "r4_token_idx": r4_token_idx.JSONSelectable;
    "r4_uri_idx": r4_uri_idx.JSONSelectable;
    "r4b_date_idx": r4b_date_idx.JSONSelectable;
    "r4b_number_idx": r4b_number_idx.JSONSelectable;
    "r4b_quantity_idx": r4b_quantity_idx.JSONSelectable;
    "r4b_reference_idx": r4b_reference_idx.JSONSelectable;
    "r4b_string_idx": r4b_string_idx.JSONSelectable;
    "r4b_token_idx": r4b_token_idx.JSONSelectable;
    "r4b_uri_idx": r4b_uri_idx.JSONSelectable;
    "resources": resources.JSONSelectable;
    "subscription_tier": subscription_tier.JSONSelectable;
    "tenants": tenants.JSONSelectable;
    "terminology_codes": terminology_codes.JSONSelectable;
    "terminology_edge": terminology_edge.JSONSelectable;
    "terminology_systems": terminology_systems.JSONSelectable;
    "users": users.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "auth_method": auth_method.Whereable;
    "authorization_code": authorization_code.Whereable;
    "limitations": limitations.Whereable;
    "migrations": migrations.Whereable;
    "migrations_state": migrations_state.Whereable;
    "r4_date_idx": r4_date_idx.Whereable;
    "r4_number_idx": r4_number_idx.Whereable;
    "r4_quantity_idx": r4_quantity_idx.Whereable;
    "r4_reference_idx": r4_reference_idx.Whereable;
    "r4_string_idx": r4_string_idx.Whereable;
    "r4_token_idx": r4_token_idx.Whereable;
    "r4_uri_idx": r4_uri_idx.Whereable;
    "r4b_date_idx": r4b_date_idx.Whereable;
    "r4b_number_idx": r4b_number_idx.Whereable;
    "r4b_quantity_idx": r4b_quantity_idx.Whereable;
    "r4b_reference_idx": r4b_reference_idx.Whereable;
    "r4b_string_idx": r4b_string_idx.Whereable;
    "r4b_token_idx": r4b_token_idx.Whereable;
    "r4b_uri_idx": r4b_uri_idx.Whereable;
    "resources": resources.Whereable;
    "subscription_tier": subscription_tier.Whereable;
    "tenants": tenants.Whereable;
    "terminology_codes": terminology_codes.Whereable;
    "terminology_edge": terminology_edge.Whereable;
    "terminology_systems": terminology_systems.Whereable;
    "users": users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "auth_method": auth_method.Insertable;
    "authorization_code": authorization_code.Insertable;
    "limitations": limitations.Insertable;
    "migrations": migrations.Insertable;
    "migrations_state": migrations_state.Insertable;
    "r4_date_idx": r4_date_idx.Insertable;
    "r4_number_idx": r4_number_idx.Insertable;
    "r4_quantity_idx": r4_quantity_idx.Insertable;
    "r4_reference_idx": r4_reference_idx.Insertable;
    "r4_string_idx": r4_string_idx.Insertable;
    "r4_token_idx": r4_token_idx.Insertable;
    "r4_uri_idx": r4_uri_idx.Insertable;
    "r4b_date_idx": r4b_date_idx.Insertable;
    "r4b_number_idx": r4b_number_idx.Insertable;
    "r4b_quantity_idx": r4b_quantity_idx.Insertable;
    "r4b_reference_idx": r4b_reference_idx.Insertable;
    "r4b_string_idx": r4b_string_idx.Insertable;
    "r4b_token_idx": r4b_token_idx.Insertable;
    "r4b_uri_idx": r4b_uri_idx.Insertable;
    "resources": resources.Insertable;
    "subscription_tier": subscription_tier.Insertable;
    "tenants": tenants.Insertable;
    "terminology_codes": terminology_codes.Insertable;
    "terminology_edge": terminology_edge.Insertable;
    "terminology_systems": terminology_systems.Insertable;
    "users": users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "auth_method": auth_method.Updatable;
    "authorization_code": authorization_code.Updatable;
    "limitations": limitations.Updatable;
    "migrations": migrations.Updatable;
    "migrations_state": migrations_state.Updatable;
    "r4_date_idx": r4_date_idx.Updatable;
    "r4_number_idx": r4_number_idx.Updatable;
    "r4_quantity_idx": r4_quantity_idx.Updatable;
    "r4_reference_idx": r4_reference_idx.Updatable;
    "r4_string_idx": r4_string_idx.Updatable;
    "r4_token_idx": r4_token_idx.Updatable;
    "r4_uri_idx": r4_uri_idx.Updatable;
    "r4b_date_idx": r4b_date_idx.Updatable;
    "r4b_number_idx": r4b_number_idx.Updatable;
    "r4b_quantity_idx": r4b_quantity_idx.Updatable;
    "r4b_reference_idx": r4b_reference_idx.Updatable;
    "r4b_string_idx": r4b_string_idx.Updatable;
    "r4b_token_idx": r4b_token_idx.Updatable;
    "r4b_uri_idx": r4b_uri_idx.Updatable;
    "resources": resources.Updatable;
    "subscription_tier": subscription_tier.Updatable;
    "tenants": tenants.Updatable;
    "terminology_codes": terminology_codes.Updatable;
    "terminology_edge": terminology_edge.Updatable;
    "terminology_systems": terminology_systems.Updatable;
    "users": users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "auth_method": auth_method.UniqueIndex;
    "authorization_code": authorization_code.UniqueIndex;
    "limitations": limitations.UniqueIndex;
    "migrations": migrations.UniqueIndex;
    "migrations_state": migrations_state.UniqueIndex;
    "r4_date_idx": r4_date_idx.UniqueIndex;
    "r4_number_idx": r4_number_idx.UniqueIndex;
    "r4_quantity_idx": r4_quantity_idx.UniqueIndex;
    "r4_reference_idx": r4_reference_idx.UniqueIndex;
    "r4_string_idx": r4_string_idx.UniqueIndex;
    "r4_token_idx": r4_token_idx.UniqueIndex;
    "r4_uri_idx": r4_uri_idx.UniqueIndex;
    "r4b_date_idx": r4b_date_idx.UniqueIndex;
    "r4b_number_idx": r4b_number_idx.UniqueIndex;
    "r4b_quantity_idx": r4b_quantity_idx.UniqueIndex;
    "r4b_reference_idx": r4b_reference_idx.UniqueIndex;
    "r4b_string_idx": r4b_string_idx.UniqueIndex;
    "r4b_token_idx": r4b_token_idx.UniqueIndex;
    "r4b_uri_idx": r4b_uri_idx.UniqueIndex;
    "resources": resources.UniqueIndex;
    "subscription_tier": subscription_tier.UniqueIndex;
    "tenants": tenants.UniqueIndex;
    "terminology_codes": terminology_codes.UniqueIndex;
    "terminology_edge": terminology_edge.UniqueIndex;
    "terminology_systems": terminology_systems.UniqueIndex;
    "users": users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "auth_method": auth_method.Column;
    "authorization_code": authorization_code.Column;
    "limitations": limitations.Column;
    "migrations": migrations.Column;
    "migrations_state": migrations_state.Column;
    "r4_date_idx": r4_date_idx.Column;
    "r4_number_idx": r4_number_idx.Column;
    "r4_quantity_idx": r4_quantity_idx.Column;
    "r4_reference_idx": r4_reference_idx.Column;
    "r4_string_idx": r4_string_idx.Column;
    "r4_token_idx": r4_token_idx.Column;
    "r4_uri_idx": r4_uri_idx.Column;
    "r4b_date_idx": r4b_date_idx.Column;
    "r4b_number_idx": r4b_number_idx.Column;
    "r4b_quantity_idx": r4b_quantity_idx.Column;
    "r4b_reference_idx": r4b_reference_idx.Column;
    "r4b_string_idx": r4b_string_idx.Column;
    "r4b_token_idx": r4b_token_idx.Column;
    "r4b_uri_idx": r4b_uri_idx.Column;
    "resources": resources.Column;
    "subscription_tier": subscription_tier.Column;
    "tenants": tenants.Column;
    "terminology_codes": terminology_codes.Column;
    "terminology_edge": terminology_edge.Column;
    "terminology_systems": terminology_systems.Column;
    "users": users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "auth_method": auth_method.SQL;
    "authorization_code": authorization_code.SQL;
    "limitations": limitations.SQL;
    "migrations": migrations.SQL;
    "migrations_state": migrations_state.SQL;
    "r4_date_idx": r4_date_idx.SQL;
    "r4_number_idx": r4_number_idx.SQL;
    "r4_quantity_idx": r4_quantity_idx.SQL;
    "r4_reference_idx": r4_reference_idx.SQL;
    "r4_string_idx": r4_string_idx.SQL;
    "r4_token_idx": r4_token_idx.SQL;
    "r4_uri_idx": r4_uri_idx.SQL;
    "r4b_date_idx": r4b_date_idx.SQL;
    "r4b_number_idx": r4b_number_idx.SQL;
    "r4b_quantity_idx": r4b_quantity_idx.SQL;
    "r4b_reference_idx": r4b_reference_idx.SQL;
    "r4b_string_idx": r4b_string_idx.SQL;
    "r4b_token_idx": r4b_token_idx.SQL;
    "r4b_uri_idx": r4b_uri_idx.SQL;
    "resources": resources.SQL;
    "subscription_tier": subscription_tier.SQL;
    "tenants": tenants.SQL;
    "terminology_codes": terminology_codes.SQL;
    "terminology_edge": terminology_edge.SQL;
    "terminology_systems": terminology_systems.SQL;
    "users": users.SQL;
  }[T];

}
