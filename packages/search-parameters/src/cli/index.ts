import { Command, program } from "commander";
import { mkdirSync, writeFileSync } from "node:fs";
import path from "node:path";
import * as prettier from "prettier";

import { R4, R4B } from "@iguhealth/fhir-types/versions";

import {
  createHash,
  getSearchParameterSearchParameter,
} from "../api/generate.js";
import { loadParameters } from "../api/load.js";

function generateCommands(command: Command) {
  command
    .command("canonical-map")
    .requiredOption("-o, --output <output>", "output file")
    .action(async (options) => {
      const r4Parameters = loadParameters(R4);
      const r4bParameters = loadParameters(R4B);
      const hash = await createHash(
        R4B,
        r4bParameters,
        await createHash(R4, r4Parameters),
      );

      mkdirSync(path.join(options.output, ".."), { recursive: true });
      writeFileSync(
        options.output,
        await prettier.format(
          `// Do not edit this file it has been generated via the CLI generate canonical-map command.
          import {SearchParameterCanonicalHash} from "../api/generate.js";
        export default ${JSON.stringify(hash, null, 2)} as SearchParameterCanonicalHash`,
          {
            parser: "typescript",
          },
        ),
      );
    });

  command
    .command("special-parameters")
    .requiredOption("-o, --output <output>", "output file")
    .action(async (options) => {
      const r4Parameters = await getSearchParameterSearchParameter(
        loadParameters(R4),
      );
      const r4bParameters = await getSearchParameterSearchParameter(
        loadParameters(R4B),
      );

      mkdirSync(path.join(options.output, ".."), { recursive: true });
      writeFileSync(
        options.output,
        await prettier.format(
          `// Do not edit this file it has been generated via the CLI generate special-parameters command.
          import { Resource, R4, R4B, FHIR_VERSION } from "@iguhealth/fhir-types/versions";
        export default  { [R4]: ${JSON.stringify(r4Parameters, null, 2)}, [R4B]: ${JSON.stringify(r4bParameters, null, 2)} } as Record<FHIR_VERSION, Resource<FHIR_VERSION, "SearchParameter">[]>`,
          {
            parser: "typescript",
          },
        ),
      );
    });
}

generateCommands(program.command("generate"));

await program.parseAsync();
