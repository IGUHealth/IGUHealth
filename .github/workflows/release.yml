name: Publish Package to npmjs
on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      #
    steps:
      - uses: actions/checkout@v4

      - name: Apply versioning
        run: yarn version apply -R --all

      - name: Build image
        run: |
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[A-Z]' '[a-z]')
          docker build . --file dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
        #

      - id: package_json_version
        run: |
          content=`cat ./packages/server/package.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"

      - name: Push image
        run: |
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[A-Z]' '[a-z]')
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # This changes all uppercase characters to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Pulls image from server package.json which is set in previous step.
          VERSION=$(echo "${{fromJson(steps.package_json_version.outputs.packageJson).version}}")
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:latest

  npm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20.9.0
          cache: "yarn"
          registry-url: "https://registry.npmjs.org"

      - name: EnableCorePack
        run: corepack enable

      - name: Install dependencies
        run: yarn

      - name: Configure git
        run: |
          git config --global user.email "runner@iguhealth"
          git config --global user.name "github-actions"
          git switch main

      - name: Apply versioning
        run: yarn version apply -R --all

      - name: commit to main branch
        run: |
          git add .
          git commit -m "chore: publish packages"
          git push

      - name: Configure NPM AUTH
        run: |
          yarn config set npmAuthToken $NPM_TOKEN
          yarn config set npmPublishRegistry https://registry.npmjs.org
          yarn config set npmAlwaysAuth true
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - run: yarn workspaces foreach -A -pt --topological-dev run publish
        timeout-minutes: 10
